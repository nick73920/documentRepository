package com.supcon.orchid.SESWssFe.services.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map; 
import java.util.Arrays;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.supcon.orchid.annotation.BAPIsMneCode;
import com.supcon.orchid.annotation.BAPMneField;
import com.supcon.orchid.audit.annotation.AuditLog;
import com.supcon.orchid.audit.entities.AuditUtil;
import com.supcon.orchid.id.IdGenerator;
import org.hibernate.Hibernate;
import org.hibernate.type.Type;
import org.hibernate.criterion.DetachedCriteria;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import com.supcon.orchid.container.mvc.utils.XmlUtils;
import org.hibernate.query.Query;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.util.HtmlUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.supcon.orchid.workflow.engine.transformers.PendingResultTransformer;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.DisposableBean;
import com.supcon.orchid.services.BAPException;
import com.supcon.orchid.services.BAPException.Code;
import com.supcon.orchid.utils.DateUtils;
import com.supcon.orchid.services.BaseServiceImpl;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import com.supcon.orchid.security.OrchidAuthenticationToken;
import com.supcon.orchid.services.IModelTreeLayRecService;
import com.supcon.orchid.container.mvc.results.BAPEntityTransformer;
import com.supcon.orchid.counter.Counter;
import com.supcon.orchid.counter.CounterManager;
import com.supcon.orchid.counter.CounterType;
import com.supcon.orchid.utils.DocumentUtils;
import com.supcon.orchid.SESWssFe.services.SESWssFeCostBudgeService;
import com.supcon.orchid.SESWssFe.services.SESWssFeCostBudgeImportService;
import com.supcon.orchid.SESWssFe.entities.SESWssFeCostBudgeDealInfo;
import com.supcon.orchid.utils.DateUtils;
import com.supcon.orchid.utils.Inflector;
import com.supcon.orchid.utils.OrchidUtils;
import com.supcon.orchid.utils.Param;
import com.supcon.orchid.foundation.entities.Company;
import com.supcon.orchid.foundation.entities.Document;
import com.supcon.orchid.foundation.entities.Staff;
import com.supcon.orchid.foundation.entities.SystemCode;
import com.supcon.orchid.foundation.entities.User;
import com.supcon.orchid.db.DbUtils;
import com.supcon.orchid.utils.JSONPlainSerializer;
import com.supcon.orchid.utils.MneCodeGenterate;
import com.supcon.orchid.ec.entities.AdvQueryCondition;
import com.supcon.orchid.ec.entities.CustomPropertyModelMapping;
import com.supcon.orchid.ec.entities.CustomPropertyViewMapping;
import com.supcon.orchid.ec.entities.CustomerCondition;
import com.supcon.orchid.ec.entities.DataClassific;
import com.supcon.orchid.ec.entities.Sql;
import com.supcon.orchid.ec.entities.View;
import com.supcon.orchid.ec.entities.DataGrid;
import com.supcon.orchid.ec.entities.DealInfo;
import com.supcon.orchid.ec.entities.Event;
import com.supcon.orchid.ec.entities.ExtraView;
import com.supcon.orchid.ec.services.BusinessCenterService;
import com.supcon.orchid.ec.services.ConditionService;
import com.supcon.orchid.ec.services.SqlService;
import com.supcon.orchid.ec.services.ViewServiceFoundation;
import com.supcon.orchid.ec.services.DataGridService;
import com.supcon.orchid.utils.ReflectUtils;
import com.supcon.orchid.ec.services.CreatorService;
import com.supcon.orchid.foundation.services.DataPermissionService;
import com.supcon.orchid.foundation.services.DocumentService;
import com.supcon.orchid.foundation.services.SynchronizeInfoService;
import com.supcon.orchid.script.entities.Script;
import com.supcon.orchid.script.EngineScriptExecutor;
import com.supcon.orchid.script.services.ScriptService;
import com.supcon.orchid.i18n.InternationalResource;
import com.supcon.orchid.orm.dao.BaseDao.DBTYPE;
import com.supcon.orchid.orm.enums.DealInfoType;
import com.supcon.orchid.orm.hibernate.types.TypeFactory;
import com.supcon.orchid.workflow.engine.entities.WorkFlowVar;
import com.supcon.orchid.ec.entities.EntityTableInfo;
import com.supcon.orchid.ec.enums.ViewType;
import com.supcon.orchid.ec.enums.ShowType;
import com.supcon.orchid.SESWssFe.entities.SESWssFeBudgeItem;
import com.supcon.orchid.SESWssFe.daos.SESWssFeBudgeItemDao;
import com.supcon.orchid.SESWssFe.services.SESWssFeBudgeItemService;
import com.supcon.orchid.SESWssFe.entities.SESWssFeCostBudge;
import com.supcon.orchid.SESWssFe.daos.SESWssFeCostBudgeDao;
import com.supcon.orchid.SESWssFe.services.SESWssFeCostBudgeService;
import com.supcon.orchid.SESWssFe.entities.SESWssFeCostType;
import com.supcon.orchid.SESWssFe.daos.SESWssFeCostTypeDao;
import com.supcon.orchid.SESWssFe.services.SESWssFeCostTypeService;
import com.supcon.orchid.SESWssFe.entities.SESWssFeBudgetExt;
import com.supcon.orchid.SESWssFe.daos.SESWssFeBudgetExtDao;
import com.supcon.orchid.SESWssFe.services.SESWssFeBudgetExtService;
import com.supcon.orchid.utils.BapCodeGenerator;
import com.supcon.orchid.services.Page;
import com.supcon.orchid.tree.PrepareData;
import com.supcon.orchid.services.QueryEntity;
import com.supcon.orchid.tree.Tree;
import com.supcon.orchid.tree.TreeDao;
import javax.annotation.Resource;
import javax.persistence.Table;
import com.supcon.orchid.ec.entities.Field;
import com.supcon.orchid.ec.entities.Model;
import com.supcon.orchid.ec.entities.Property;
import com.supcon.orchid.ec.services.IBAPBaseService;
import com.supcon.orchid.ec.services.ModelServiceFoundation;
import com.supcon.orchid.ec.enums.RegionType;
import com.supcon.orchid.utils.SerializeUitls;
import com.supcon.orchid.utils.SpringUtil;
import com.supcon.orchid.SESWssFe.daos.impl.SESWssFeCostBudgeDaoImpl;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import org.hibernate.query.NativeQuery;
import org.hibernate.jdbc.Work;
import com.supcon.orchid.audit.service.DataAuditLogService;
import com.supcon.orchid.audit.entities.SignatureLog;
import com.supcon.orchid.workflow.engine.services.TransitionService;
import com.supcon.orchid.foundation.services.ReliableMessageSenderService;
/* CUSTOM CODE START(serviceimpl,import,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */

@Service("sESWssFe_costBudgeService")
@Transactional
public class SESWssFeCostBudgeServiceImpl  extends BaseServiceImpl<SESWssFeCostBudge> implements SESWssFeCostBudgeService, InitializingBean, DisposableBean {
	private static final Pattern pattern = Pattern.compile("( AS | as )((\"?)(.*?)(\"?))(,| )");
	private static final Pattern p = Pattern.compile("( JOIN | join )((.*?)) ((\"?)(.*?)(\"?))( ON | on )");
	private static final Pattern countPattern = Pattern.compile("(SUM\\()((\"?)(.*?)(\"?))(\\) AS | as )");
	private static Pattern oneToManyPattern = Pattern.compile("(\"value\":\")(\\$\\$.*?\\$\\$)(\")");
	private static Pattern p4 = Pattern.compile("\\$\\{(.+?),(.+?)\\}");
	private static Pattern p5 = Pattern.compile("\\$\\{(.*?)\\}");
	@Autowired
    private SESWssFeCostBudgeService self;
	@Autowired
	ReliableMessageSenderService  reliableMessageSenderService;//消息发送服务
	@Autowired
	private SqlService sqlService;
	@Autowired
	BapCodeGenerator bapCodeGenerator;
	@Autowired
	ScriptService scriptService;
	@Autowired
	private IdGenerator autoGeneratorID;
	@Autowired
	private DataAuditLogService dataAuditLogService;
	@Value("${bap.company.single}")
	private Boolean isSingleMode = false;
	
	public Boolean getIsSingleMode() {
		if(null == isSingleMode){
			isSingleMode = false;
	    }
		return isSingleMode;
	}
	@Autowired
	private DocumentService documentService;
	@Autowired
	private SESWssFeBudgeItemDao budgeItemDao;
	@Autowired
	private SESWssFeBudgeItemService budgeItemService;
	@Autowired
	private SESWssFeCostBudgeDao costBudgeDao;
	@Autowired
	private SESWssFeCostTypeDao costTypeDao;
	@Autowired
	private SESWssFeCostTypeService costTypeService;
	@Autowired
	private SESWssFeBudgetExtDao budgetExtDao;
	@Autowired
	private SESWssFeBudgetExtService budgetExtService;
	@Autowired
	private DataPermissionService dataPermissionService;
	@Autowired
	private CounterManager counterManager;
	@Autowired
	private ConditionService conditionService;
	@Autowired
	private ViewServiceFoundation viewServiceFoundation;
	private Counter counter;
	@Autowired
	private CreatorService creatorService;
	@Autowired
	private SynchronizeInfoService synchronizeInfoService;
	@Autowired
	private ModelServiceFoundation modelServiceFoundation;
	@Autowired
	private SESWssFeCostBudgeImportService costBudgeImportService;
	@Autowired
	private BusinessCenterService businessCenterService;

	/**
     * controller直接调用的列表查询
     *
     * @param page
     * @param viewCode
     * @param datagridCode
     * @param processKey
     * @param entityCode
     * @param fastQueryCond
     * @param advQueryCond
     * @param classifyCodes
     * @param dataTableSortColKey
     * @param dataTableSortColName
     * @param dataTableSortColOrder
     * @param mainBusinessId
     * @param businessCenterCode
     * @param split
     * @param searchObjects
     * @param tableProcessKey
     * @param permissionCode
     * @param flowBulkFlag
     * @param noQueryFlag
     * @param exportSql
     * @param findExportDataInfosCount
     * @param queryEntity
     * @return
     */
    @Override
    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
    public Map<String, Object> listQuery(Page<SESWssFeCostBudge> page, int currentSqlType, String viewCode, String datagridCode, Boolean crossCompanyFlag,
            String processKey, String entityCode, String fastQueryCond, String advQueryCond, String classifyCodes,
            String dataTableSortColKey, String dataTableSortColName, String dataTableSortColOrder, Long mainBusinessId,
            String businessCenterCode, String split, Object[] searchObjects,
            String tableProcessKey, String permissionCode, Boolean flowBulkFlag, Boolean noQueryFlag, String exportSql,
            Integer findExportDataInfosCount, Map<String,String> dynamicFieldsMap, QueryEntity queryEntity) {

        View listView = viewServiceFoundation.getView(viewCode);
        List<Param> params = new ArrayList<Param>();
        if (null != crossCompanyFlag) {
            params.add(new Param("crossCompanyFlag", crossCompanyFlag, Param.EQUAL_LIKELEFT, "BOOLEAN"));
        }
        params.add(new Param("\"costBudge\".VALID", true, Param.LIKE_UNSUPPORT, "BOOLEAN"));
        if (null != advQueryCond && advQueryCond.trim().length() > 0) {
            params.add(new Param("advQueryCond", advQueryCond, Param.LIKE_ALL));
        }
        if (null != classifyCodes && classifyCodes.trim().length() > 0) {
            params.add(new Param("classifyCodes", classifyCodes));
        }
        if (null != dataTableSortColKey && dataTableSortColKey.length() > 0) {
            String sortColKey = dataTableSortColKey;
            if (null != dataTableSortColName && dataTableSortColName.length() > 0) {
                sortColKey += "::" + dataTableSortColName;
            }
            params.add(new Param("dataTable-sortColKey", sortColKey));
        }
        if (null != dataTableSortColOrder && dataTableSortColOrder.length() > 0) {
            params.add(new Param("dataTable-sortColOrder", dataTableSortColOrder));
        }
        if (!(null != advQueryCond && advQueryCond.trim().length() > 0)) {
            if (null != fastQueryCond && fastQueryCond.trim().length() > 0) {
                params.add(new Param("fastQueryCond", fastQueryCond, Param.LIKE_ALL));
            }
        }
        if (null != mainBusinessId && null != businessCenterCode) {
            Param pm = businessCenterService.businessSql("\"costBudge\"", businessCenterCode, mainBusinessId);
            params.add(pm);
        }

        Model assmodel = modelServiceFoundation.getModel(listView.getAssModel().getCode());
        List<Property> properties = modelServiceFoundation.findProperties(assmodel);
        Map<String, String> fieldMap = new HashMap<String, String>();
        for (Property p : properties) {
            fieldMap.put(p.getName(), p.getColumnName());
        }
        /// TODO 测试树形参数
        if(listView.getUsedForTree()&&listView.getAssTreeModelCode()!=null){
			if (null != dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".id") && dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".id").trim().length() > 0) {
				params.add(new Param("\"tree-id-"+listView.getAssTreeModelCode()+"\"."+fieldMap.get("id"),dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".id"),Param.LIKE_UNSUPPORT,"LONG"));
			}
			if (null != dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layRec") && dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layRec").trim().length() > 0) {
				if(listView.getIncludeChildren()){
					params.add(new Param("\"tree-layRec-"+listView.getAssTreeModelCode()+"\"."+fieldMap.get("layRec"),dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layRec"),Param.EQUAL_LIKELEFT));
				}else{
					params.add(new Param("\"tree-layRec-"+listView.getAssTreeModelCode()+"\"."+fieldMap.get("layRec"),dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layRec"),Param.LIKE_UNSUPPORT));
				}
			}
			if (null != dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layNo") && dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layNo").trim().length() > 0) {
				params.add(new Param("\"tree-layNo-"+listView.getAssTreeModelCode()+"\"."+fieldMap.get("layNo"),dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".layNo"),Param.LIKE_UNSUPPORT,"LONG"));
			}
			if (null != dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".parentId") && dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".parentId").trim().length() > 0) {
				params.add(new Param("\"tree-"+listView.getAssTreeModelCode()+"\"."+Inflector.getInstance().columnize("parentId"),dynamicFieldsMap.get("tree-"+listView.getAssTreeModelCode()+".parentId"),Param.LIKE_UNSUPPORT,"LONG"));
			}
		}

		if (null != dynamicFieldsMap.get("department.layRec") && dynamicFieldsMap.get("department.layRec").trim().length() > 0) {
			params.add(new Param("\"belongDepartment\".LAY_REC", dynamicFieldsMap.get("department.layRec"), Param.EQUAL_LIKELEFT));	
		}
		if (null != dynamicFieldsMap.get("position.layRec") && dynamicFieldsMap.get("position.layRec").trim().length() > 0) {
			params.add(new Param("\"ownerPosition\".LAY_REC", dynamicFieldsMap.get("position.layRec"), Param.EQUAL_LIKELEFT));	
		}
		if (null != dynamicFieldsMap.get("costBudge.layRec") && dynamicFieldsMap.get("costBudge.layRec").trim().length() > 0) {
			params.add(new Param("\"parentBudgetId\".LAY_REC", dynamicFieldsMap.get("costBudge.layRec"), Param.EQUAL_LIKELEFT));	
		}

        if (listView.getAssModel().getDataType() == 2) {
            if (null != dynamicFieldsMap.get(fLTL(listView.getAssModel().getModelName())+".layRec") && dynamicFieldsMap.get(fLTL(listView.getAssModel().getModelName())+".layRec").trim().length() > 0) {
                params.add(new Param("\"" + fLTL(listView.getAssModel().getModelName()) + "\"."
                        + fieldMap.get("layRec"), dynamicFieldsMap.get(fLTL(listView.getAssModel().getModelName())+".layRec"), Param.EQUAL_LIKELEFT));
            }
        }
        if (currentSqlType == Sql.TYPE_LIST_REFERENCE) {
            Map confMap=null;
            if(listView.getIsShadow()){
                confMap=listView.getShadowView().getExtraView().getConfigMap();
            }else{
                confMap=listView.getExtraView().getConfigMap();
            }
            if(confMap!=null){
                Map listProperty=(Map)confMap.get("listProperty");
                if(listProperty!=null&&listProperty.get("isTransCondition")!=null&&listProperty.get("isTransCondition").equals("true")){
                    if(listProperty.get("conditionContent")!=null&&!listProperty.get("conditionContent").equals("")){
                        params.add(new Param("referenceCondition",listProperty.get("conditionContent").toString(), Param.LIKE_ALL));
                    }
                }
            }
        }
        if (datagridCode != null && !"".equals(datagridCode)) {
            generateCustomerConditionByDg(params, datagridCode, split, queryEntity);
        } else {
            generateCustomerCondition(params, viewCode, split, queryEntity);
        }
        generateClassificCondition(params, classifyCodes, split, queryEntity);
        int validPosition = 0; // 出现valid字段的下标
        for (int i = 0; i < params.size(); i++) {
            Object param = params.get(i);
            if (param.toString().indexOf("\"costBudge\".VALID = true") != -1) {
                validPosition = i;
            }
            if (param.toString().indexOf("\"columnName\":\"VALID\"") > 0
                    || param.toString().indexOf("\"costBudge\".VALID = ?") > 0) {
                params.set(validPosition, new Param("1", 1, Param.LIKE_UNSUPPORT, "int"));
                break;
            }
        }
        Map<String, Object> stateMap = new HashMap<String, Object>();
        if (listView.getType() == ViewType.REFERENCE && listView.getOnlyForQuery()) {
            searchObjects = new Object[1];
            searchObjects[0] = 1;
            stateMap.put("searchObjects", searchObjects);
        }
        Map<String, Object> resultMap = findExportDataInfos(page, viewCode, datagridCode, searchObjects, currentSqlType,
                tableProcessKey, flowBulkFlag, listView.getHasAttachment(), params, permissionCode, noQueryFlag,
                exportSql, findExportDataInfosCount);
        stateMap.put("fieldPermissionModelCode", listView.getAssModel().getCode());
        stateMap.put("currentSqlType", currentSqlType);
        stateMap.put("hasAttachment", listView.getHasAttachment());
        stateMap.put("viewCode", resultMap.get("viewCode"));
        stateMap.put("findExportDataInfosCount", resultMap.get("findExportDataInfosCount"));
        return stateMap;
    }


    /**
     * controller直接调用的编辑视图提交
     *
     * @param costBudge
     * @param workFlowVar
     * @param pendingId
     * @param deploymentId
     * @param operateType
     * @param pendingActivityType
     * @param webSignetFlag
     * @param signatureLog
     * @param orchid_ass_fileuploads
     * @param superEdit
     * @param dgLists
     * @param dgDeletedIds
     * @param viewCode
     * @param activityName
     * @param locale
     * @return
     */
    @Override
    @AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge", desc = "提交", operType = "4")
    public Map<String, Object> submit(SESWssFeCostBudge costBudge, WorkFlowVar workFlowVar, Long pendingId,
            Long deploymentId, String operateType, String pendingActivityType, Boolean webSignetFlag,
            SignatureLog signatureLog, Map<String, Object> fileuploads, Boolean superEdit, Map<String, String> dgLists,
            Map<String, String> dgDeletedIds, String viewCode, String activityName, Locale locale, String viewSelect) {
        // 将costBudge转为游离态，避免保存前查询时version重置为数据库的version，导致乐观锁失效
        costBudgeDao.evict(costBudge);
        Map<String, Object> responseMap = new HashMap<String, Object>();
        if (null == costBudge.getId()){
            responseMap.put("operate", "add");
        }else{
            responseMap.put("operate", "edit");
        }
        self.saveCostBudge(costBudge,dgLists,dgDeletedIds,fileuploads ,viewCode,null,signatureLog);
        responseMap.put("dealSuccessFlag", true);
        responseMap.put("operateType", "save");
        responseMap.put("viewselect", viewSelect);
        responseMap.put("tableInfoId", costBudge.getTableInfoId());
        responseMap.put("id", costBudge.getId());
        return responseMap;
    }

	/**
	 * controller直接调用的获取datagrid
	 *
	 * @param dgPage
	 * @param datagridCode
	 * @param dataGridName
	 * @param parameters   request的传入参数
	 * @param refId
	 * @param costBudge
	 * @throws Exception
	 */
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void dataGridData(Page dgPage, String datagridCode, String dataGridName, Map<String, String[]> parameters,
			Long refId, Long id) throws Exception {
		DataGrid dg = null;
		if (!com.supcon.orchid.utils.StringUtils.isEmpty(datagridCode)) {
			dg = viewServiceFoundation.getDataGrid(datagridCode, "runtime");
		} else {
			dg = viewServiceFoundation.getDataGridByName(dataGridName, "runtime");
			datagridCode = dg.getCode();
		}
		if (null == dg) {
			throw new BAPException("未找到DataGrid" + datagridCode);
		}
		Model model = dg.getTargetModel();
		if (refId != null && refId > 0) {
			// dataGridRefCopy(dg);
		} else {
//			setFieldPermissionModelCode(model.getCode());
			String searchCondition = "";
			List<Object> params = new ArrayList<Object>();
			CustomerCondition ccon = viewServiceFoundation.findCustomerConditionByDatagridCode(datagridCode);
			if (null != ccon && ccon.getSql() != null && ccon.getSql().length() > 0) {
				String customerSql = ccon.getSql();
				if (customerSql.indexOf("return") > -1) {
					Map<String, Object> variables = new HashMap<String, Object>();
					variables.put("parameters", parameters);
					customerSql = EngineScriptExecutor.eval(customerSql, variables).toString();
				}
				Pattern p = Pattern.compile("\\$\\{(.+?),(.+?)\\}");
				Matcher m = p.matcher(customerSql);
				List<Object> list = new ArrayList<Object>();
				while (m.find()) {
					String str = m.group();
					// String[] strs = str.substring(2, str.length()-1).split(",");
					String value = parameters.get(m.group(1))[0]; // request.getParameter(str.substring(2,
																	// str.length()-1));
					String type = m.group(2);
					if ("int".equals(type)) {
						Integer integer = new Integer(value);
						list.add(integer);
					} else if ("date".equals(type)) {
						Date date = new Date(value);
						list.add(date);
					} else if ("double".equals(type)) {
						Double doubles = new Double(value);
						list.add(doubles);
					} else if ("long".equals(type)) {
						Long longs = new Long(value);
						list.add(longs);
					} else if ("string".equals(type)) {
						list.add(value);
					/*} else if ("method".equals(type)) {
						value = m.group(1);
						try {
							list.add(Ognl.getValue(value, this));
						} catch (Exception e) {
							log.info(e.getMessage());
						}*/
					} else {
						list.add(value);
					}
					customerSql = customerSql.replace(str, "?");
				}
				searchCondition += customerSql;
				params.addAll(list);
			} else if (null != ccon && ccon.getJsonCondition() != null && ccon.getJsonCondition().length() > 0) {
				String jsonString = ccon.getJsonCondition();
				Pattern p = Pattern.compile("\\$\\{(.*?)\\}");
				Matcher m = p.matcher(jsonString);
				while (m.find()) {
					String str = m.group();
					String value = parameters.get(m.group(1))[0];
					if (value != null) {
						jsonString = jsonString.replace(str, value);
					} else {
						jsonString = jsonString.replace(str, "");
					}
				}
				AdvQueryCondition advQuery = conditionService.toSql(jsonString);
				String s = advQuery.getSql();
				if (advQuery.getSql() != null) {
					searchCondition += advQuery.getSql();
				}
				params.addAll(advQuery.getValues());
			}
			String artifact = model.getEntity().getModule().getArtifact();
			Class dgclass = Class.forName("com.supcon.orchid." + artifact + ".entities." + model.getJpaName());
			SESWssFeCostBudge costBudge = new SESWssFeCostBudge();
			if (id != null && id != -1) {
				costBudge = self.getCostBudge(id);
			}else{
			    costBudge.setId(-1L);
			}
			findDataGridPage(dg, dgclass, dgPage, costBudge, searchCondition, params);
			if (null != dgPage && null != dgPage.getResult() && !dgPage.getResult().isEmpty()) {
				List<String> attachKey = new ArrayList<String>();
				Map confMap = dg.getConfigMap();
				Map layoutMap = (Map) confMap.get("layout");
				List<Map> ls = (List<Map>) layoutMap.get("sections");
				for (Map lm : ls) {
					if (lm.get("regionType").equals("DATAGRID")) {
						List<Map> lc = (List<Map>) lm.get("cells");
						for (Map lk : lc) {
							if ("PROPERTYATTACHMENT".equals(lk.get("columnType")) && lk.get("key") != null) {
								attachKey.add(lk.get("key").toString());
							}
						}
					}
				}
				if (attachKey.size() > 0) {
					Map<String, String> param = new HashMap<String, String>();
					for (Object item : dgPage.getResult()) {
						String docType = dgclass.getDeclaredField("DOC_TYPE").get(null).toString();
						Long itemid = (Long) dgclass.getMethod("getId").invoke(item);
						List<Document> documents = documentService.getByLinkIdAndType(itemid, docType);
						if (null != documents) {
							for (String key : attachKey) {
								Object orgIds = dgclass.getMethod("get" + fLTU(key) + "MultiFileIds").invoke(item);
								Object orgNames = dgclass.getMethod("get" + fLTU(key) + "MultiFileNames").invoke(item);
								Object fileIcons = dgclass.getMethod("get" + fLTU(key) + "MultiFileIcons").invoke(item);
								if (orgIds == null) {
									param.put(key + "MultiFileIds", null);
								} else {
									param.put(key + "MultiFileIds", orgIds.toString());
								}
								if (orgNames == null) {
									param.put(key + "MultiFileNames", null);
								} else {
									param.put(key + "MultiFileNames", orgNames.toString());
								}
								if (fileIcons == null) {
									param.put(key + "MultiFileIcons", null);
								} else {
									param.put(key + "MultiFileIcons", fileIcons.toString());
								}
							}
							for (Document doc : documents) {
								for (String key : attachKey) {
									if (null != doc.getPropertyCode()) {
										if (dgclass.getDeclaredField(key.toUpperCase() + "_PROPERTY_CODE").get(null)
												.equals(doc.getPropertyCode())) {
											if (null == param.get(key + "MultiFileIds")) {
												param.put(key + "MultiFileIds", doc.getId().toString());
												param.put(key + "MultiFileNames", doc.getName());
												param.put(key + "MultiFileIcons", DocumentUtils.getIcon(doc.getName()));
											} else {
												param.put(key + "MultiFileIds",
														param.get(key + "MultiFileIds") + "," + doc.getId().toString());
												param.put(key + "MultiFileNames",
														param.get(key + "MultiFileNames") + "," + doc.getName());
												param.put(key + "MultiFileIcons",
														param.get(key + "MultiFileIcons") + "," + DocumentUtils.getIcon(doc.getName()));
											}
										}
									}
								}
							}
							for (String key : attachKey) {
								dgclass.getDeclaredMethod("set" + fLTU(key) + "MultiFileIds", String.class).invoke(item,
										param.get(key + "MultiFileIds"));
								dgclass.getDeclaredMethod("set" + fLTU(key) + "MultiFileNames", String.class)
										.invoke(item, param.get(key + "MultiFileNames"));
								dgclass.getDeclaredMethod("set" + fLTU(key) + "MultiFileIcons", String.class)
								.invoke(item, param.get(key + "MultiFileIcons"));
							}
						}
					}
				}
			}
		}
	}

	/**
	 * 根据主显示字段列表获取Map
	 * @param mainDisplayKeys 主显示字段
	 * @return Map<String,String> key：count  value：数据数量；  key：idMap  value：id
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public Map<String, Object> getMainDisplayMap(Serializable mainDisplayName, Serializable businessKeyName,List<Serializable> mainDisplayKeys) {
		String hql = "select " + mainDisplayName + ",id,"+ businessKeyName + " from " + SESWssFeCostBudge.JPA_NAME + " where " + mainDisplayName + " in (:mainDisplayKeys)"  + "and VALID = 1";
		Query query =  costBudgeDao.createQuery(hql);
		query.setParameterList("mainDisplayKeys", mainDisplayKeys);
		List<Object[]> list = query.list();
		Map<String, Object> m = new HashMap<String, Object>();
		m.put("count", list.size());
		Map<Serializable, Serializable> map = new HashMap<Serializable, Serializable>();
		if (list != null && !list.isEmpty()) {
			for (Object[] objs : list) {
				map.put((Serializable) (String.valueOf(objs[0])), (Serializable) objs[1]);
				map.put(businessKeyName, (Serializable) objs[2]);
			}
		}
		m.put("idMap", map);
		return m;
	}
	/**
	 * 根据业务主键列表获取Map
	 * @param businessKeys 业务主键列表
	 * @return Map<String,String> key：businessKey  value：id
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public Map<Serializable,Serializable> getBusinessKeyMap(Serializable businessKeyName,List<Serializable> businessKeys){
		if(businessKeyName!=null && String.valueOf(businessKeyName).length() > 0){
			String hql = "select " + businessKeyName + ",id from " + SESWssFeCostBudge.JPA_NAME + " where " + businessKeyName + " in (:businessKeys)";
			Query query = costBudgeDao.createQuery(hql);
			query.setParameterList("businessKeys", businessKeys);
			List<Object[]> list = query.list();
			Map<Serializable,Serializable> map = new HashMap<Serializable,Serializable>();
			if(list!=null && !list.isEmpty()){
				for (Object[] objs : list) {
					map.put((Serializable)(String.valueOf(objs[0])), (Serializable)objs[1]);
				}
			}
			return map;
		}
		return null;	
		
	}
	
	/**
	 * 获取父节点对象
	*/
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public Map<String, Object> getParentNodeMap(Serializable mainDisplayName, Serializable businessKeyName, List<Serializable> serial, String queryParam) {
		String hql = null;
		if(queryParam!=null && queryParam.equals("md")){
			hql = "select " + mainDisplayName + ",id,"+ businessKeyName + ",fullPathName,layNo,layRec,parentId,leaf from " + SESWssFeCostBudge.JPA_NAME + " where " + mainDisplayName + " in (:serial)";
		}else if(queryParam!=null && queryParam.equals("bk")){
			hql = "select " + mainDisplayName + ",id,"+ businessKeyName + ",fullPathName,layNo,layRec,parentId,leaf from " + SESWssFeCostBudge.JPA_NAME + " where " + businessKeyName + " in (:serial)";
		}
		Query query =  costBudgeDao.createQuery(hql);
		query.setParameterList("serial", serial);
		List<Object[]> list = query.list();
		/*String sql = null;
		if(queryParam!=null && queryParam.equals("md")){
			sql = "select * from " + SESWssFeCostBudge.TABLE_NAME + " where " + mainDisplayName + " = ?";
		}else if(queryParam!=null && queryParam.equals("bk")){
			sql = "select * from " + SESWssFeCostBudge.TABLE_NAME + " where " + businessKeyName + " = ?";
		}
		List<SESWssFeCostBudge> list = (List<SESWssFeCostBudge>) costBudgeDao.createNativeQuery(sql,serial.get(0)).list();
		*/
		Map<String, Object> m = new HashMap<String, Object>();
		if(queryParam!=null && queryParam.equals("md")){
			m.put("count", list.size());
		}
		if (list != null && !list.isEmpty()) {
			for (Object[] obj : list) {
				m.put(serial.get(0).toString(), obj);
			}
		}
		
		return m;
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public SESWssFeCostBudge getCostBudge(long id){
		return self.getCostBudge(id, null);
	}

	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public SESWssFeCostBudge getCostBudge(long id, String viewCode){
		SESWssFeCostBudge costBudge = costBudgeDao.load(id);

		// 一对多情况处理
		if(costBudge != null){
		}
		return costBudge;
	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public String getCostBudgeAsJSON(long id, String include){
		SESWssFeCostBudge costBudge = costBudgeDao.load(id);
		// 一对多情况处理

		if(costBudge == null) {
			return "";
		}
		return JSONPlainSerializer.serializeAsJSON(costBudge, include, new BAPEntityTransformer());
	}
	

	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(SESWssFeCostBudge costBudge){
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		checkDeletePermit(costBudge.getId());
		beforeDeleteCostBudge(costBudge);
		costBudgeDao.delete(costBudge);
		afterDeleteCostBudge(costBudge);
		costBudgeDao.flush();
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		params.add(costBudge);
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		props.put("eventType", "delete");
		String delIds = "";
		// 一对多情况处理
			// TODO delete
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(List<Long> costBudgeIds){
		deleteCostBudge(costBudgeIds, null);
	}

	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(List<Long> costBudgeIds, String eventTopic) {
		List<SESWssFeCostBudge> costBudges = new ArrayList<SESWssFeCostBudge>();
		for(Long costBudgeId : costBudgeIds){
			SESWssFeCostBudge costBudge = self.getCostBudge(costBudgeId);
			costBudges.add(costBudge);
			if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
				if(!StringUtils.isEmpty(AuditUtil.getColumnStringA())){
					AuditUtil.setColumnStringA(AuditUtil.getColumnStringA() + (null == costBudge.getId() ? "" : "," + costBudge.getId().toString()));
				} else {
					AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
				}
				if(!StringUtils.isEmpty(AuditUtil.getColumnStringB())){
					AuditUtil.setColumnStringB(AuditUtil.getColumnStringB() + (null == costBudge.getId() ? "" : "," + costBudge.getId().toString()));
				} else {
					AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
				}
				if(!StringUtils.isEmpty(AuditUtil.getColumnStringC())){
					AuditUtil.setColumnStringC(AuditUtil.getColumnStringC() + (null == costBudge.getId() ? "" : "," + costBudge.getId().toString()));
				} else {
					AuditUtil.setColumnStringC(null == costBudge.getId() ? "" : costBudge.getId().toString());
				}
			}
		}
		
		for(SESWssFeCostBudge costBudge : costBudges){
			beforeDeleteCostBudge(costBudge);
		}
		
		
		/**
		 * 假删
		 * 增加SQL/HQL执行的数据日志记录
		 */
		if(costBudges != null && costBudges.size() > 0 ){
			for(SESWssFeCostBudge costBudge : costBudges){
				List<String> propertyNames = new ArrayList<String>();
				List<Object> previousState = new ArrayList<Object>();
				List<Object> currentState = new ArrayList<Object>();
				propertyNames.add("valid");
				currentState.add(false);
				previousState.add(true);
				dataAuditLogService.saveCustomerAudit(InternationalResource.get("foundation.common.delete"),costBudge, costBudge.getId(), currentState.toArray(), previousState.toArray(), propertyNames.toArray(new String[propertyNames.size()]));
			}
		}
		if(costBudgeIds != null && costBudgeIds.size() > 0) {
			String hql = "update " + SESWssFeCostBudge.JPA_NAME + " set valid = false where id in(:ids)";
			Query query = costBudgeDao.createQuery(hql);
			query.setParameterList("ids", costBudgeIds);
			query.executeUpdate();
			costBudgeDao.clearAllCacheByEntity();
		}
		
		for(SESWssFeCostBudge costBudge : costBudges){
			afterDeleteCostBudge(costBudge);
		}
		
		if(eventTopic==null){
			for(SESWssFeCostBudge costBudgez : costBudges){
				costBudgez.setValid(false);
				List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
				params.add(costBudgez);
				Map<String, Object> props = new HashMap<String, Object>();
				props.put("callType", "service");
				props.put("entityCode", "SESWssFe_1.0.0_costBudget");
				props.put("eventType", "delete");
			}
		}
	}

	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(long costBudgeId, int costBudgeVersion){
		self.deleteCostBudge(costBudgeId, costBudgeVersion,null);
	}
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(long costBudgeId, int costBudgeVersion,SignatureLog signatureLog){
		SESWssFeCostBudge costBudge = self.getCostBudge(costBudgeId);
		if(costBudge != null && !costBudge.isValid()){
			throw new BAPException(BAPException.Code.OBJECT_HAVE_BEAN_DELETED);
		}
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		checkDeletePermit(costBudgeId);
		beforeDeleteCostBudge(costBudge);
		costBudgeDao.delete(costBudgeId, costBudgeVersion);
		afterDeleteCostBudge(costBudge);
		costBudgeDao.flush();
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		params.add(costBudge);
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		props.put("eventType", "delete");
		
		if(signatureLog != null ) {
			Object businessKey=null;
			businessKey=costBudge.getId();
			signatureLog.setTableId(costBudge.getId());
			if(businessKey != null) {
				if(StringUtils.isEmpty(signatureLog.getBusinessKey())){
					signatureLog.setBusinessKey(businessKey.toString());
				} else {
					signatureLog.setBusinessKey(signatureLog.getBusinessKey() + "," + businessKey.toString());
				}
			}
			if(null != AuditUtil.getCurrentAudit() && null != AuditUtil.getCurrentAudit().getOperationAudit()){
				signatureLog.setOperateLogUuid(AuditUtil.getCurrentAudit().getOperationAudit().getUuid());
			}
		}
		
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void checkDeletePermit(Long id) throws BAPException{
		String costBudgeHql = "select count(costBudge.id) as totalCoual from " + SESWssFeCostBudge.JPA_NAME + " as costBudge where costBudge.parentId=? and costBudge.valid=true";
		List<Long> costBudgeCount = costBudgeDao.findByHql(costBudgeHql, id);
		if (costBudgeCount.get(0) > 0){
			throw new BAPException(BAPException.Code.ASS_NOT_DELETE);
		}
	}

	/**
	 * 树结点的移动
	 * @param id
	 * @param moveParentId
	 */
    @Override
    public void moveNodeInfo(Long id, Long moveParentId) {
        costBudgeDao.flush();
        costBudgeDao.clear();
        SESWssFeCostBudge costBudge = costBudgeDao.load(id);
        Long parentId = costBudge.getParentId();
        // 当待移动节点的父结点不为顶层结点时，判断移动结点后原父结点是否变为叶子结点
        if (!parentId.equals(-1L)) {
            List<SESWssFeCostBudge> parentChildren = costBudgeDao.getChildren(parentId.toString(), parentId,
                    new SESWssFeCostBudgePrepareData(null, null), false);
            if (parentChildren.size() == 1) {
                SESWssFeCostBudge parent = costBudgeDao.load(parentId);
                parent.setLeaf(true);
                costBudgeDao.update(parent);
            }
        }
        if (moveParentId.equals(-1L)) {
            costBudge.setFullPathName("" + costBudge.getId());
            costBudge.setParentId(-1L);
            costBudge.setSort(null);
            costBudge.setLayNo(1);
            costBudge.setLayRec(costBudge.getId().toString());
        } else {
            SESWssFeCostBudge moveParentCostBudge = costBudgeDao.get(moveParentId);
            // 如果移至父结点原本为叶子结点，则修改leaf
            if (null != moveParentCostBudge
                    && (null == moveParentCostBudge.isLeaf() || moveParentCostBudge.isLeaf().equals(true))) {
                moveParentCostBudge.setLeaf(false);
            }
            costBudge.setParentId(moveParentId);
            costBudge.setFullPathName(moveParentCostBudge.getFullPathName() + "/" + costBudge.getId());
            costBudge.setLayRec(moveParentCostBudge.getLayRec() + "-" + costBudge.getId().toString());
            costBudge.setLayNo(costBudge.getLayRec().split("-").length);
        }
        // 修改待移动结点的子结点的layRec、layNo和fullPathName
        changeChildWhenMove(costBudgeDao.getChildren(costBudge.getId().toString(), costBudge.getId(), new SESWssFeCostBudgePrepareData(null, null), false));
        costBudgeDao.update(costBudge);
    }

    /**
     * 移动树形结点时修改子结点的layRec、layNo和fullPathName
     *
     * @param children
     */
    private void changeChildWhenMove(List<SESWssFeCostBudge> children) {
        if (null == children || children.size() == 0)
            return;
        for (SESWssFeCostBudge child : children) {
            SESWssFeCostBudge parent = child.getParent();
            String layRec = parent.getLayRec() + "-" + child.getId().toString();
            child.setLayRec(layRec);
            String[] layRecList = layRec.split("-");
            child.setLayNo(layRecList.length);
            String fullPathName = parent.getFullPathName() + "/" +  child.getId();
            child.setFullPathName(fullPathName);
            costBudgeDao.update(child);
            // 递归修改子结点
            changeChildWhenMove(child.getChildren());
        }
    }
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(String costBudgeIds){
		self.deleteCostBudge(costBudgeIds,null);
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.delete",operType="3")
	public void deleteCostBudge(String costBudgeIds,SignatureLog signatureLog){
		deleteCollection(costBudgeIds,signatureLog);
	}
	
	private void deleteCollection(String ids,SignatureLog signatureLog) {
		if(ids.isEmpty()){
			throw new BAPException("ec.common.checkselected");
		}
		String[] idst = ids.split(",");
		for(String idVersion : idst) {
			String id = idVersion.split("@")[0];
			String version = idVersion.split("@")[1];
			if (id != null && id.trim().length() > 0 && version != null && version.trim().length() > 0) {
				deleteCostBudge(Long.valueOf(id), Integer.valueOf(version),signatureLog);
			}
		}
		if(null != signatureLog){
			if(null != AuditUtil.getCurrentAudit() && null != AuditUtil.getCurrentAudit().getOperationAudit()){
				signatureLog.setOperateLogUuid(AuditUtil.getCurrentAudit().getOperationAudit().getUuid());
			}
			String msgId="moduleCode:SESWssFe_1.0.0#entityCode:SESWssFe_1.0.0_costBudget#modelCode:SESWssFe_1.0.0_costBudget_CostBudge#timeStamp:"+String.valueOf(System.currentTimeMillis());
			reliableMessageSenderService.sendQueue(msgId,signatureLog);
		}
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.engine.restore",operType="10")
	public void restoreCostBudge(String costBudgeIds){
		restoreCollection(costBudgeIds);
	}
	
	public void restoreCollection(String ids) {
		String[] idst = ids.split(",");
		for(String idVersion : idst) {
			String id = idVersion.split("@")[0];
			if (id != null && id.trim().length() > 0) {
				restoreCostBudge(Long.valueOf(id));
			}
		}
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.engine.restore",operType="10")
	public void restoreCostBudge(long costBudgeId){
		
		findBusinessKeyUsed(costBudgeId);	//判断业务主键是否重复
		
		SESWssFeCostBudge costBudge = self.getCostBudge(costBudgeId);
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		checkDeletePermit(costBudgeId);
		beforeRestoreCostBudge(costBudge);
		costBudge.setValid(true);
		costBudgeDao.update(costBudge);
		afterRestoreCostBudge(costBudge);
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		params.add(costBudge);
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		props.put("eventType", "restore");
	}

	@Override
	public void findBusinessKeyUsed(long costBudgeId){
		Property property = modelServiceFoundation.getBussinessProperty("SESWssFe_1.0.0_costBudget_CostBudge");
		if(property != null){
			String propertyName = property.getColumnName();
			String sql  = "select * from " + SESWssFeCostBudge.TABLE_NAME + " where valid = 1 and " + 
					propertyName + " =  (select "+ propertyName +" from "+ SESWssFeCostBudge.TABLE_NAME +" where id = ? )";
			List<Object> list =  costBudgeDao.createNativeQuery(sql,costBudgeId).list();
			if(list.size() > 0){
				throw new BAPException("foundation.bussinessKey.repeat");
			}
			
		}
	}
	
	public List<String> checkParentIsSelf(SESWssFeCostBudge costBudge) {
		List<String> assSelfPropertyList = new ArrayList<String>();
		if(null != costBudge.getId()) {
			if(null != costBudge.getParentBudgetId() && null != costBudge.getParentBudgetId().getId()) {
				if(costBudge.getParentBudgetId().getId().equals(costBudge.getId())) {
					assSelfPropertyList.add("SESWssFe.costBudget.CostBudge.parentBudgetId");
				}
			}
		}
		return assSelfPropertyList;
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.batch.import",operType="4")
	public  void batchImportBaseCostBudge(List<SESWssFeCostBudge>  costBudges){
		for(SESWssFeCostBudge costBudge:costBudges)  {
			self.saveCostBudge(costBudge, null, null, null);
		}
	}
	
	@Override
	public  void excelBatchImportBaseCostBudge(List<SESWssFeCostBudge>  costBudges){
		for(SESWssFeCostBudge costBudge:costBudges)  {
			self.saveCostBudge(costBudge, null);
		}
	}
	
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.flow.save")
	public void saveCostBudge(SESWssFeCostBudge costBudge, Map<String,String> dgLists,Map<String,String> dgDeleteIDs,Map<String,Object> assFileUploads){
		self.saveCostBudge(costBudge, dgLists,dgDeleteIDs,assFileUploads, null);
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.flow.save")
	public void saveCostBudge(SESWssFeCostBudge costBudge, Map<String,String> dgLists,Map<String,String> dgDeleteIDs,Map<String,Object> assFileUploads, String viewCode){
		self.saveCostBudge(costBudge, dgLists,dgDeleteIDs,assFileUploads, viewCode, null,null);
	}

    @Override
	public void generateCostBudgeCodes(SESWssFeCostBudge costBudge) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		generateCostBudgeCodes(costBudge, false);
	}

	@Override
	public void generateCostBudgeCodes(SESWssFeCostBudge costBudge, Boolean viewIsView) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
	}

	@Override
	public void generateCostBudgeSummarys(SESWssFeCostBudge costBudge) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		generateCostBudgeSummarys(costBudge, false);
	}

    @Override
	public void generateCostBudgeSummarys(SESWssFeCostBudge costBudge, Boolean viewIsView) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public void saveCostBudge(SESWssFeCostBudge costBudge,Map<String,String> dgLists,Map<String,String> dgDeleteIDs,Map<String,Object> assFileUploads,String viewCode, String eventTopic,boolean... isImport){
		self.saveCostBudge(costBudge, dgLists,dgDeleteIDs,assFileUploads, viewCode, eventTopic,null,isImport);
	}

	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public void saveCostBudge(SESWssFeCostBudge costBudge,Map<String,String> dgLists,Map<String,String> dgDeleteIDs,Map<String,Object> assFileUploads,String viewCode, String eventTopic, SignatureLog signatureLog,boolean... isImport){
		List<String> assSelfPropertyList = checkParentIsSelf(costBudge);
		if(null != assSelfPropertyList && !assSelfPropertyList.isEmpty()) {
			throw new BAPException(BAPException.Code.SELECT_NOT_SELF, assSelfPropertyList.get(0));
		}
		boolean isNew = false;
		String entityCode = "SESWssFe_1.0.0_costBudget";
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		String url = null;
		if(costBudge.getId() != null && costBudge.getId() > 0){
			if(StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD())){
				AuditUtil.setAuditDes("ec.pending.edit");
				AuditUtil.setAuditOperationType("2");
			}
			props.put("eventType", "modify");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/modify";
		}else{
			isNew = true;
			if(StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD())){
				AuditUtil.setAuditDes("ec.print.template.add");
				AuditUtil.setAuditOperationType("1");
			}
			props.put("eventType", "add");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/add";
		}
		List<Event> events = null;
		Boolean viewIsView = false;
		if(viewCode != null && !viewCode.trim().isEmpty()){
			View view = viewServiceFoundation.getView(viewCode);
			if(null != view) {
				viewIsView = (view.getType() == ViewType.VIEW);
			}
			events = viewServiceFoundation.getEventsByView(view);
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "beforeSave", events, costBudge);
			}
		}
		ReflectUtils.filterObjectIdIsNVL(costBudge);
		beforeSaveCostBudge(costBudge, viewIsView);

		if (viewIsView) {
			costBudgeDao.saveWithRevertVersion(costBudge);
		} else {
			costBudgeDao.save(costBudge);
		}
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		dealDatagridsSave(costBudge,viewCode,dgLists,dgDeleteIDs,assFileUploads);
		// 一对多情况处理
		
		// 根据配置规则生成编码
		try {
			generateCostBudgeCodes(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		// 根据配置规则生成摘要
		try {
			generateCostBudgeSummarys(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		
		afterSaveCostBudge(costBudge, viewIsView);


		if(viewCode != null){
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "afterSave", events, costBudge);
			}
		}
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		costBudgeDao.flush();
		costBudgeDao.clear();
		costBudge = costBudgeDao.load(costBudge.getId());
		
		
		params.add(costBudge);
		
		if(signatureLog != null) {
			Object businessKey=null;
			businessKey=costBudge.getId();
			if(businessKey != null) {
				signatureLog.setBusinessKey(businessKey.toString());
			}
			if(null != AuditUtil.getCurrentAudit() && null != AuditUtil.getCurrentAudit().getOperationAudit()){
				signatureLog.setOperateLogUuid(AuditUtil.getCurrentAudit().getOperationAudit().getUuid());
			}
			signatureLog.setTableId(costBudge.getId());
			String msgId="moduleCode:SESWssFe_1.0.0#entityCode:SESWssFe_1.0.0_costBudget#modelCode:SESWssFe_1.0.0_costBudget_CostBudge#timeStamp:"+String.valueOf(System.currentTimeMillis());
			reliableMessageSenderService.sendQueue(msgId,signatureLog);
		}
	}
	
	private void executeGScript(String entityCode, String scriptType, List<Event> events, SESWssFeCostBudge costBudge){
		for(Event e : events){
			if(e.getName().equals(scriptType)){
				if(e.getFunction()!=null && e.getFunction().length() > 0){
					try{
						Script script = scriptService.get(entityCode, e.getFunction());
						if (null == script || null == script.getCode()) {
							throw new BAPException("could not found the script.");
						}
						// 调用执行脚本方法
						Map<String, Object> variables = new HashMap<String, Object>();
						variables.put("db", DbUtils.getInstance());
						variables.put("costBudge", costBudge);
						variables.put("userId", getCurrentUser().getId().toString());
						Object retObj = EngineScriptExecutor.eval(script.getCode(), variables);
					}catch(Exception ex){
						log.warn(ex.getMessage());
					}
				}
				break;
			}
		}
	}

	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public void mergeCostBudge(SESWssFeCostBudge costBudge, Map<String,String> dgLists,Map<String,String> dgDeleteIDs,Map<String,Object> assFileUploads){
		ReflectUtils.filterObjectIdIsNVL(costBudge);
		beforeSaveCostBudge(costBudge);
		costBudgeDao.merge(costBudge);
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		dealDatagridsSave(costBudge,null,dgLists,dgDeleteIDs,assFileUploads);

		afterSaveCostBudge(costBudge);
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public Page<SESWssFeCostBudge> findCostBudges(Page<SESWssFeCostBudge> page, Criterion... criterions) {
		return costBudgeDao.findByPage(page, criterions);
	}
	@Override
	public List<Object> generateParamExcelSql(List<Param> params, Integer type, String viewCode){
		List<Object> returnList = new ArrayList<Object>();
		Boolean crossCompanyFlag = null;
		StringBuilder s = new StringBuilder();
		List<Object> list = new ArrayList<Object>();
		boolean hasWhere = false;
		String referenceCondition = "";
		String customerSql = "";
		String customerCondition = "";
		String classifySql = "";
		if (null != params && !params.isEmpty()) {
			Param param = params.get(0);
			if ("crossCompanyFlag".equals(param.getName())) {
				crossCompanyFlag = (Boolean) param.getValue();
				params.remove(0);
			}
		}

		if (null != params && !params.isEmpty()) {
			s.append(" AND ((");
			hasWhere = true;
			String advQuery = "";
			String classifyCodes = "";
			List<Object> advValues = null;
			String extraQuery = "";
			List<Object> customerValues = null;
			List<Object> extraQueryValues = null;
			List<Object> customerSqlValues = null;
			List<Object> classifySqlValues = null;
			// 组合where条件
			for (int i = 0; i < params.size(); i++) {
				Param param = params.get(i);

				if ("classifySql".equals(param.getName())) {
					classifySql = (String) param.getValue();
					continue;
				}

				if ("classifySqlValues".equals(param.getName())) {
					classifySqlValues = (List<Object>) param.getValue();
					continue;
				}

				if (type == Sql.TYPE_LIST_REFERENCE
						&& "referenceCondition".equals(param.getName())) {
					referenceCondition = (String) param.getValue();
					continue;
				}

				if ("customerValues".equals(param.getName())) {
					customerValues = (List<Object>) param.getValue();
					continue;
				}
				if ("customerSqlValues".equals(param.getName())) {
					customerSqlValues = (List<Object>) param.getValue();
					continue;
				}
				if ("customerCondition".equals(param.getName())) {
					customerCondition = (String) param.getValue();
					continue;
				}
				if ("customerSql".equals(param.getName())) {
					customerSql = (String) param.getValue();
					continue;
				}

				if ("advQueryCond".equals(param.getName())) {
					AdvQueryCondition cond = conditionService
							.toSql((String) param.getValue());
					if (cond != null) {
						advValues = cond.getValues();
						advQuery = cond.getSql();
					}
					continue;
				}
				// 数据分类内的高级查询
				if ("classifyCodes".equals(param.getName())) {
					classifyCodes = (String) param.getValue();
					continue;
				}
				if ("extraQueryCond".equals(param.getName())) {
					Map<String, String> oneToManyParams = new HashMap<String, String>();
					oneToManyParams = (Map<String, String>) param.getValue();
					String json = sqlService.getExtraQueryJson(viewCode);
					Matcher matcher = oneToManyPattern.matcher(json);
					while (matcher.find()) {
						String tag = (matcher.group(2));
						String subTag = tag.substring(2, tag.length() - 2);
						if (null != oneToManyParams.get(subTag)
								&& ((String) (oneToManyParams.get(subTag)))
										.length() > 0) {
							json = json.replace(
									tag,
									oneToManyParams.get(subTag).replace("\"",
											"SYMBOL_DOUBLE_QUOTE"));
						} else {
							json = json.replace(tag, "");
						}
					}
					if (null != json && json.length() > 0) {
						AdvQueryCondition cond = conditionService.toSql(json);
						if (cond != null) {
							extraQueryValues = cond.getValues();
							extraQuery = cond.getSql();
						}
					}
					continue;
				}
				if ("dataTable-sortColKey".equals(param.getName())) {
					String sortValue = (String) param.getValue();
					String key = null, columnName = null, customKey = null;
					if (sortValue.indexOf("::") > 0) {
						key = sortValue.split("::")[0];
						columnName = sortValue.split("::")[1];
					} else if (sortValue.indexOf(".") > 0) {
						customKey = sortValue.split("\\.")[0];
						if (customKey.contains("attrMap")) {
							key = customKey;
							columnName = sortValue.split("\\.")[1];
						} else {
							key = sortValue;
						}
					} else {
						key = sortValue;
					}
					int lastDotPos = key.lastIndexOf('.');
					if (null == columnName) {
						columnName = Inflector.getInstance().columnize(
								key.substring(lastDotPos + 1));
					}
					String tableAlias = lastDotPos < 0 ? "\"maintenanceList\""
							: "\"" + key.substring(0, lastDotPos) + "\"";
					if ("\"pending\"".equals(tableAlias)) {
						tableAlias = "\"p\"";
					}
					// sortOrderByStr.append(tableAlias).append(".").append(columnName);
					continue;
				}
				if ("dataTable-sortColOrder".equals(param.getName())) {
					// sortOrderByStr.append(" ").append((String)
					// param.getValue());
					continue;
				}
				if (param.getName().startsWith("\"tree-")) {
					if (param.getName().startsWith("\"tree-layRec-")) {
						String treeCondition = sqlService.getSqlQuery(viewCode,
								Sql.TYPE_USED_TREE);
						if (treeCondition != null
								&& treeCondition.trim().length() > 0) {
							if (hasWhere){
								s.append(" AND ");
							}else{
								s.append(" WHERE (");
                            }
							s.append(treeCondition);
							if (param.getLikeType() == Param.EQUAL_LIKELEFT) {
								list.add(param.getValue());
								list.add((String) param.getValue() + "-%");
							}
							if (param.getLikeType() == Param.LIKE_UNSUPPORT) {
								list.add(param.getValue());
							}
						}
					}
					continue;
				}
				if (!param.getName().startsWith("\"tree-")
						&& param.getLikeType() == Param.EQUAL_LIKELEFT) {
					s.append(" AND ( ").append(param.getName()).append("= ? ")
							.append(" OR ").append(param.getName())
							.append(" like ? )");
					list.add(param.getValue());
					list.add(param.getValue() + "-%");
					continue;
				}
				if (i > 0) {
					s.append(" AND ");
				}
				if ((null != param.getContainLower() && param.getContainLower())) {
					s.append(" ( ");
				}
				if (!param.getCaseSensitive()) {
					if (param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_LEFT || param.getLikeType() == Param.LIKE_RIGHT
							|| param.getLikeType() == Param.LIKE_UNSUPPORT || param.getLikeType() == Param.NONE_EQUAL) {
						if (!"DATE".equals(param.getColumnType()) && !"DATETIME".equals(param.getColumnType()) && !"LONG".equals(param.getColumnType())
								&& !"INTEGER".equals(param.getColumnType()) && !"DECIMAL".equals(param.getColumnType()) && !"BOOLEAN".equals(param.getColumnType())) {
							s.append(" UPPER (");
						}
					}
				}
				if (param.getLikeType() != Param.MULTI_LIKE) {
					s.append(param.getName());
				}
				if (!param.getCaseSensitive()) {
					if (param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_LEFT || param.getLikeType() == Param.LIKE_RIGHT
							|| param.getLikeType() == Param.LIKE_UNSUPPORT || param.getLikeType() == Param.NONE_EQUAL) {
						if (!"DATE".equals(param.getColumnType()) && !"DATETIME".equals(param.getColumnType()) && !"LONG".equals(param.getColumnType())
								&& !"INTEGER".equals(param.getColumnType()) && !"DECIMAL".equals(param.getColumnType()) && !"BOOLEAN".equals(param.getColumnType())) {
							s.append(") ");
						}
					}
				}
				String exp = " = ?";
				if (param.getLikeType() == Param.LIKE_UNSUPPORT) {
					/*if ((Boolean) param.getValue() == true) {
						s.append(" = 1");
					} else {
						s.append(" = 0");
					}*/
					s.append(" = ?");
				} else if (param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_RIGHT || param.getLikeType() == Param.LIKE_LEFT) {
					//s.append(" LIKE '%" + param.getValue() + "%'");
					s.append(" LIKE ?");
					exp = " LIKE ?";
				} else if (param.getLikeType() == Param.GREATE_EQUAL) {
					//s.append(" <= '" + param.getValue() + "'");
					s.append(" <= ?");
					exp = " >= ?";
				} else if (param.getLikeType() == Param.LESS_EQUAL) {
					//s.append(" <= '" + param.getValue() + "'");
					s.append(" <= ?");
					exp = " <= ?";
				} else if (param.getLikeType() == Param.GREATE_THAN) {
					//s.append(" > '" + param.getValue() + "'");
					s.append(" > ?");
					exp = " > ?";
				} else if (param.getLikeType() == Param.LESS_THAN) {
					//s.append(" < '" + param.getValue() + "'");
					s.append(" < ?");
					exp = " < ?";
				} else if (param.getLikeType() == Param.NONE_EQUAL) {
					//s.append(" <> '" + param.getValue() + "'");
					s.append(" <> ?");
					exp = " <> ?";
				} else if (param.getLikeType() == Param.MULTI_LIKE) {
					exp = " LIKE ?";
					String multiValue = param.getValue().toString();
					String[] values = multiValue.split(",");
					StringBuilder multiSb = new StringBuilder();
					for (int m = 0; m < values.length; m++) {
						if (null != values[m] && values[m].length() > 0) {
							multiSb.append(" OR ");
							multiSb.append(param.getName()).append(" LIKE ? ");
							list.add("%," + values[m] + ",%");
						}
					}
					if (multiSb.length() > 0) {
						s.append(" ( ");
						s.append(multiSb.toString().substring(4));
						s.append(" ) ");
					}
				} else {
				}
				if (param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_LEFT || param.getLikeType() == Param.LIKE_RIGHT) {
					String upperStr = (String) param.getValue();
					if (!param.getCaseSensitive()) {
						upperStr = upperStr.toUpperCase();
					}
					if (param.getLikeType() == Param.LIKE_ALL) {
						param.setValue('%' + upperStr + '%');
					}
					if (param.getLikeType() == Param.LIKE_LEFT) {
						param.setValue(upperStr + '%');
					}
					if (param.getLikeType() == Param.LIKE_RIGHT) {
						param.setValue('%' + upperStr);
					}
				}
				if (param.getLikeType() == Param.LIKE_UNSUPPORT || param.getLikeType() == Param.NONE_EQUAL) {
					if ("DATETIME".equals(param.getColumnType()) || "DATE".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(DateUtils.ecDateFormat((String) param.getValue()));
						}
					} else if ("LONG".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(Long.parseLong((String) param.getValue()));
						}
					} else if ("INTEGER".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(Integer.parseInt((String) param.getValue()));
						}
					} else if ("DECIMAL".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(new BigDecimal((String) param.getValue()));
						}
					} else {
						if (param.getValue() instanceof String) {
							String upperStr = (String) param.getValue();
							if (!param.getCaseSensitive()) {
								upperStr = upperStr.toUpperCase();
							}
							param.setValue(upperStr);
						} else {
							param.setValue(param.getValue());
						}
					}
				}
				if (param.getLikeType() == Param.GREATE_EQUAL || param.getLikeType() == Param.GREATE_THAN || param.getLikeType() == Param.LESS_EQUAL || param.getLikeType() == Param.LESS_THAN) {
					if ("DATETIME".equals(param.getColumnType()) || "DATE".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(DateUtils.ecDateFormat((String) param.getValue()));
						}
					} else if ("LONG".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(Long.parseLong((String) param.getValue()));
						}
					} else if ("INTEGER".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(Integer.parseInt((String) param.getValue()));
						}
					} else if ("DECIMAL".equals(param.getColumnType())) {
						if (param.getValue() instanceof String) {
							param.setValue(new BigDecimal((String) param.getValue()));
						}
					}

				}

				if (param.getLikeType() != Param.MULTI_LIKE) {
					list.add(param.getValue());
				}
				if (null != param.getContainLower() && param.getContainLower()) {
					String prefix = param.getName().substring(0, param.getName().lastIndexOf("."));
					String columnName = param.getName().substring(param.getName().lastIndexOf(".") + 1);
					if (null != param.getModelInfo() && param.getModelInfo().length > 0) {
						String entityInfo = (param.getModelInfo())[0];
						String serviceInfo = (param.getModelInfo())[1];
						String layRecColumnName = null;
						if (param.getModelInfo().length > 2) {
							layRecColumnName = (param.getModelInfo())[2];
						}
						//非树形定义getContainLower方法，如果是树形实现IModelTreeLayRecService接口的getContainLower方法
						List<String> layRecs = this.getContainLower(entityInfo, Inflector.getInstance().columnToField(columnName), exp, param.getValue(), false);
						if (null != layRecs && !layRecs.isEmpty()) {
							String layRecCond = "";
							for (String layRec : layRecs) {
								layRecCond += " OR " + prefix + "." + (layRecColumnName == null ? "LAY_REC" : layRecColumnName) + " = ?";
								layRecCond += " OR " + prefix + "." + (layRecColumnName == null ? "LAY_REC" : layRecColumnName) + " like ?";
								list.add(layRec);
								list.add(layRec + "-%");
							}
							s.append(layRecCond);
						}
						s.append(" ) ");
					}
				}
			}
			if (advQuery != null && advQuery.length() > 0) {
				s.append(" AND ").append(advQuery);
				if (advValues != null) {
					list.addAll(advValues);
				}
			}
			if (extraQuery != null && extraQuery.length() > 0) {
				s.append(" AND ").append(extraQuery);
				if (extraQueryValues != null) {
					list.addAll(extraQueryValues);
				}
			}
			if (customerCondition != null && customerCondition.length() > 0) {
				s.append(" AND ").append(customerCondition);
				if (customerValues != null && customerValues.size() > 0) {
					list.addAll(customerValues);
				}
			}
			if (customerSql != null && customerSql.length() > 0) {
				s.append(" AND ").append(customerSql);
				if (customerSqlValues != null && customerSqlValues.size() > 0) {
					list.addAll(customerSqlValues);
				}
			}
			if (classifySql != null && classifySql.length() > 0) {
				s.append(" AND (").append(classifySql).append(")");
				if (classifySqlValues != null && classifySqlValues.size() > 0) {
					list.addAll(classifySqlValues);
				}
			}
			s.append(" ) ");
		}
		s.append(" ) ");

		returnList.add(s.toString());
		returnList.add(list);
		return returnList;
	}
	
	@SuppressWarnings("unchecked")
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	private SESWssFeCostBudgeDealInfo getDealInfoEntity(Long tableInfoId) {
		
		List<SESWssFeCostBudgeDealInfo> list=costBudgeDao.createQuery("from " + SESWssFeCostBudgeDealInfo.JPA_NAME + " where tableInfoId=?", tableInfoId).setMaxResults(1).list();
		if(list.size()>0){
			return list.get(0);
		}
		return null;
	}
	@Override
	public void saveDealInfo(SESWssFeCostBudgeDealInfo dealInfo) {
		costBudgeDao.saveDealInfo(dealInfo);
	}
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public int getDealInfoCount(Long tableInfoId) {
		String sql = "SELECT count(1) totalCount " + "FROM "+SESWssFeCostBudgeDealInfo.TABLE_NAME+" DI " + "LEFT JOIN " + User.TABLE_NAME + " U ON DI.USER_ID=U.ID " + "LEFT JOIN " + Staff.TABLE_NAME
				+ " S ON S.ID=U.STAFF_ID " + "WHERE DI.TABLE_INFO_ID = ?";
		Number list = (Number) costBudgeDao.createNativeQuery(sql, tableInfoId).uniqueResult();
		return list.intValue();
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public List<Object[]> findDealInfos(Long tableInfoId, boolean expandFlag) {
		String sql = "SELECT DI.TASK_DESCRIPTION ACTIVITYNAME,DI.CREATE_TIME CREATETIME ,DI.COMMENTS COMMENTS,DI.OUTCOME OUTCOME,S.NAME STAFFNAME,DI.OUTCOME_DES OUTCOME_DES,DI.ASSIGN_STAFF ASSIGNSTAFF ,DEALINFO_TYPE DEALINFOTYPE, DI.PROXY_STAFF PROXYSTAFF, DI.PENDING_CREATE_TIME PCREATETIME,  DI.SIGNATURE SIGNATURE, WT.TYPE "
				+ " FROM "+SESWssFeCostBudgeDealInfo.TABLE_NAME + " DI " 
				+ " LEFT JOIN WF_TASK WT ON WT.CODE = DI.ACTIVITY_NAME AND WT.PROCESS_KEY = DI.PROCESS_KEY AND WT.PROCESS_VERSION = DI.PROCESS_VERSION "
				+ " LEFT JOIN " + User.TABLE_NAME + " U ON DI.USER_ID=U.ID " + "LEFT JOIN " + Staff.TABLE_NAME + " S ON S.ID=U.STAFF_ID "
				+ " WHERE DI.TABLE_INFO_ID = ? AND DI.TASK_DESCRIPTION is not null ";
		if (expandFlag) {
			sql += " AND DI.COMMENTS IS NOT NULL";
			DBTYPE dbtype = costBudgeDao.getDBType();
			if (DBTYPE.MSSQL == dbtype) {
				sql += " AND DI.COMMENTS != ''";
			}
		}
		sql += " ORDER BY DI.SORT ASC, DI.CREATE_TIME ASC, DI.ID ASC";
		List<Object[]> list = costBudgeDao.createNativeQuery(sql, tableInfoId).list();
		for(Object[] obj:list){
			if(obj[2]!=null){
				obj[2]=HtmlUtils.htmlEscape(obj[2].toString().trim());
			}
		}
		return list;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public Map<String, List<Object[]>> findDealInfosGroup(Long tableInfoId, boolean expandFlag) {
		StringBuilder groupSql = new StringBuilder();
		groupSql.append("SELECT DI.TASK_DESCRIPTION ACTIVITYNAME,DI.CREATE_TIME CREATETIME ,DI.COMMENTS COMMENTS,DI.OUTCOME OUTCOME,S.NAME STAFFNAME,DI.OUTCOME_DES OUTCOME_DES,DI.ASSIGN_STAFF ASSIGNSTAFF ,DEALINFO_TYPE DEALINFOTYPE, DI.PROXY_STAFF PROXYSTAFF, DI.PENDING_CREATE_TIME PCREATETIME,  DI.SIGNATURE SIGNATURE, DI.ACTIVITY_NAME AN, WT.NAME TDESC, WT.TYPE, WT.SHOW_IN_SIMPLE_DEALINFO ");
		groupSql.append(" FROM "
				+ SESWssFeCostBudgeDealInfo.TABLE_NAME
				+ " DI LEFT JOIN WF_TASK WT ON WT.CODE = DI.ACTIVITY_NAME AND WT.PROCESS_KEY = DI.PROCESS_KEY AND WT.PROCESS_VERSION = DI.PROCESS_VERSION ");
		groupSql.append(" LEFT JOIN " + User.TABLE_NAME + " U ON DI.USER_ID=U.ID LEFT JOIN " + Staff.TABLE_NAME + " S ON S.ID=U.STAFF_ID ");
		groupSql.append(" WHERE DI.TABLE_INFO_ID = ? AND DI.TASK_DESCRIPTION IS NOT NULL ");
		if (expandFlag) {
			groupSql.append(" AND DI.COMMENTS IS NOT NULL");
			DBTYPE dbtype = costBudgeDao.getDBType();
			if (DBTYPE.MSSQL == dbtype) {
				groupSql.append(" AND DI.COMMENTS != ''");
			}
		}
		groupSql.append(" ORDER BY WT.ROUTE_SEQUENCE ASC, DI.SORT ASC, DI.CREATE_TIME ASC, DI.ID ASC");

		List<Object[]> groupList = costBudgeDao.createNativeQuery(groupSql.toString(), tableInfoId).list();
		Map<String, List<Object[]>> groupMap = new LinkedHashMap<String, List<Object[]>>();
		List<Object[]> otherList = new ArrayList<Object[]>();
		for (Object[] obj : groupList) {
			if (obj[0] != null) {
				obj[0] = InternationalResource.get(obj[0].toString(), getCurrentLanguage());
			}
			if (obj[2] != null) {
				obj[2] = HtmlUtils.htmlEscape(obj[2].toString().trim());
			}
			if (obj[12] != null) {
				obj[12] = InternationalResource.get(obj[12].toString(), getCurrentLanguage());
			} else {
				if(null != obj[11]) {
					obj[12] = InternationalResource.get(obj[11].toString(), getCurrentLanguage());
				}
			}
			if(null != obj[11]) {
				if (!groupMap.containsKey(obj[11].toString())) {
					List<Object[]> diList = new ArrayList<Object[]>();
					diList.add(obj);
					groupMap.put(obj[11].toString(), diList);
				} else {
					List<Object[]> exsitDiList = groupMap.get(obj[11].toString());
					exsitDiList.add(obj);
					groupMap.put(obj[11].toString(), exsitDiList);
				}
			} else {
				otherList.add(obj);
			}
		}
		if(null != otherList && !otherList.isEmpty()) {
			groupMap.put("bap_other", otherList);
		}
		return groupMap;
	}

	private static String matchSql(Pattern p, String sql, String prefix, Map<String, String> maps, int n1, int n2) {
		Matcher matcher = p.matcher(sql);
		int i = 1;
		if (null == maps){
			maps = new HashMap<String, String>();
	    }
		while (matcher.find()) {
			String tag = (matcher.group(n1));// 含引号
			String tag2 = (matcher.group(n2));// 不含引号
			String symbol = prefix + i++;
			sql = sql.replace(tag, symbol);
			maps.put(symbol, tag2);
		}
		return sql;
	}
	
	private static String replaceSql(Pattern p, String sql, Map<String, String> maps, int n1, int n2) {
		Matcher matcher = p.matcher(sql);
		while (matcher.find()) {
			String tag = matcher.group(n1);
			String tag2 = matcher.group(n2);
			for(Map.Entry<String, String> entry : maps.entrySet()) {
				if(entry.getValue().equals(tag)) {
					sql = sql.replace(tag2,entry.getKey());
				}
			}
		}
		return sql;
	}
	//@SuppressWarnings("unchecked")
	//@Override
	//@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	//public List<String> getContainLower(String modelName, String fieldName, String exp, Object value, Boolean crossCompany) {
	//	String layRecHql = "select layRec from " + modelName + " where valid = true and " + fieldName + exp;
	//	if(crossCompany) {
	//		layRecHql += " and cid = ?";
	//		return costBudgeDao.createQuery(layRecHql, value, getCurrentCompanyId()).list();
	//	}
	//	return costBudgeDao.createQuery(layRecHql, value).list();
	//}

	private void dealListTreePageData(Page<SESWssFeCostBudge> costBudges, String viewCode){
		List<SESWssFeCostBudge> result = costBudges.getResult();
		if(null != result && !result.isEmpty()) {
			int rootPos = 0;
			SESWssFeCostBudge rootTree = result.get(0);
			for(int i = 0; i < result.size(); i++) {
				if(rootTree.getLayNo() > result.get(i).getLayNo()) {
					rootTree = result.get(i);
					rootPos = i;
				}
			}
			result.get(rootPos).setParentId(-1L);
			costBudges.setTreeToSurfaceMode(true);
			SESWssFeCostBudge costBudgeTree = costBudgeDao.buildTree("costBudge" + viewCode, new ListPrepareData(costBudges), false);
			if(null != costBudgeTree.getChildren() && !costBudgeTree.getChildren().isEmpty()) {
				List<SESWssFeCostBudge> treeList = new ArrayList<SESWssFeCostBudge>();
				Tree.treeToList(costBudgeTree, treeList, false);
				if(treeList.size() == result.size()) {
					costBudges.setResult(treeList);
					costBudges.setTreeToSurfaceMode(false);
				} 
			} 
		}
	}
	
	/**
	 * 列表树数据准备内部类<br>
	 * 
	 */
	private class ListPrepareData implements PrepareData<SESWssFeCostBudge,Long> {
		private Page<SESWssFeCostBudge> costBudges;

		public ListPrepareData(Page<SESWssFeCostBudge> costBudges) {
			this.costBudges = costBudges;
		}

		@Override
			public SESWssFeCostBudge root() {
				SESWssFeCostBudge costBudge = new SESWssFeCostBudge();
				costBudge.setId(-1L);
				return costBudge;
			}
			
			@Override
			public List<SESWssFeCostBudge> prepare(TreeDao<SESWssFeCostBudge, Long> dao) {
				return costBudges.getResult();
			}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void findCostBudges(Page<SESWssFeCostBudge> page,  String viewCode, int type, String processKey,Boolean flowBulkFlag, Boolean hasAttachment,Boolean noQueryFlag,String exportSql, Map exportMap, List<Param> params) {
		self.findCostBudges(page,  viewCode, type, processKey, flowBulkFlag, hasAttachment, params, viewCode, noQueryFlag, exportSql, exportMap);
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void findCostBudges(Page<SESWssFeCostBudge> page,  String viewCode, int type, String processKey,Boolean flowBulkFlag, Boolean hasAttachment, List<Param> params, String permissionCode,Boolean noQueryFlag,String exportSql, Map exportMap) {
		self.commonQuery(page, viewCode, type, processKey, flowBulkFlag, hasAttachment, params, permissionCode, noQueryFlag, exportSql, exportMap);
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void findCostBudges(Page<SESWssFeCostBudge> page,  String viewCode, int type, String processKey,Boolean flowBulkFlag, Boolean hasAttachment, List<Param> params, String permissionCode, Boolean noQueryFlag,String exportSql, Map exportMap, Object... objects) {
		self.commonQuery(page, viewCode, type, processKey, flowBulkFlag, hasAttachment, params, permissionCode, noQueryFlag, exportSql, exportMap, objects);
	}
	
	/**
	 * 生成自定义字段查询sql
	 * @param viewCode 视图code
	 * @param sql 查询sql
	 * @return
	 */
	@Override
	public String generateCustomPropertySql(String viewCode, String sql) {
		View v = viewServiceFoundation.getView(viewCode);
		if (v != null && v.getHasCustomSection() != null && v.getHasCustomSection()) {
			StringBuilder selectSql = new StringBuilder();
			StringBuilder joinSql = new StringBuilder();
			List<CustomPropertyViewMapping> viewMapppingList = viewServiceFoundation.getCustomPropertyViewMappings(viewCode);
			if (viewMapppingList != null && viewMapppingList.size() > 0) {
				Set<String> propLayRecSet = new HashSet<String>();
				for (CustomPropertyViewMapping viewMapping : viewMapppingList) {
					if (viewMapping.getPropertyLayRec() != null && viewMapping.getPropertyLayRec().length() > 0) {
						String[] layRecArr = viewMapping.getPropertyLayRec().split("\\|\\|");
						if (!layRecArr[0].contains(".")) {
						    if (null != sql && sql.indexOf(viewMapping.getProperty().getColumnName()) == -1) {
								selectSql.append(",\"").append(layRecArr[0]).append("\".").append(viewMapping.getProperty().getColumnName()).append(" AS ")
										.append("\"").append(viewMapping.getProperty().getName()).append("\"");
							}
						} else {
							propLayRecSet.add(viewMapping.getPropertyLayRec());
							String modelAlias = layRecArr[0].substring(layRecArr[0].indexOf(".") + 1);
							if (null != sql && sql.indexOf(viewMapping.getProperty().getColumnName()) == -1) {
								selectSql.append(",\"cp_").append(modelAlias).append("\".").append(viewMapping.getProperty().getColumnName()).append(" AS ")
										.append("\"cp_").append(modelAlias).append(".").append(viewMapping.getProperty().getName()).append("\"");
							}
						}
					}
				}
				if (propLayRecSet != null && propLayRecSet.size() > 0) {
					Set<String> tmpPropLayRecSet = new HashSet<String>();
					tmpPropLayRecSet.addAll(propLayRecSet);
					for (Iterator<String> iter = propLayRecSet.iterator(); iter.hasNext();) {
						String propLayRec = iter.next();
						String alias1 = propLayRec.split("\\|\\|")[0];
						for (String tmpPropLayRec : tmpPropLayRecSet) {
							String alias2 = tmpPropLayRec.split("\\|\\|")[0];
							if (!alias2.equals(alias1) && alias2.startsWith(alias1)) {
								iter.remove();
								break;
							}
						}
					}
					for (String propLayrec : propLayRecSet) {
						String[] layRecArr = propLayrec.split("\\|\\|");
						String modelAlias = layRecArr[0].substring(layRecArr[0].indexOf(".") + 1);
						String mainModelAlias = layRecArr[0].substring(0, layRecArr[0].indexOf("."));
						String[] modelAliasTuple = modelAlias.split("\\.");
						String[] relations = layRecArr[1].split("\\-");
						String modelAlias1 = "";
						String modelAlias2 = "";
						for (int i = 0; i < relations.length; i++) {
							String[] relationArr = relations[i].split(",");
							String tableName1 = relationArr[0];
							String colName1 = relationArr[1];
							// String tableName2 = relationArr[2];
							String colName2 = relationArr[3];
							modelAlias1 += (i > 0 ? "." + modelAliasTuple[i] : modelAliasTuple[i]);
							if (i > 0) {
								modelAlias2 += (i > 1 ? "." + modelAliasTuple[i - 1] : modelAliasTuple[i - 1]);
							}
							joinSql.append(" LEFT OUTER JOIN ").append(tableName1).append(" \"cp_").append(modelAlias1).append("\"").append(" ON \"cp_")
									.append(modelAlias1).append("\".").append(colName1).append(" = \"");
							if (i > 0) {
								joinSql.append("cp_").append(modelAlias2);
							} else {
								joinSql.append(mainModelAlias);
							}
							joinSql.append("\".").append(colName2);
						}
					}
				}
				if (selectSql.length() > 0) {
					sql = sql.substring(0, sql.indexOf(" FROM ")) + selectSql.toString() + sql.substring(sql.indexOf(" FROM "));
					if (joinSql.length() > 0) {
						sql += joinSql.toString();
					}
				}
			}
		}
		return sql;
	}
	
	/**
	 * @param page
	 * @param viewCode
	 * @param type
	 * @param processKey
	 * @param flowBulkFlag
	 * @param hasAttachment
	 * @param params
	 * @param permissionCode
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void commonQuery(Page<SESWssFeCostBudge> page, String viewCode, int type, String processKey, Boolean flowBulkFlag,
			Boolean hasAttachment, List<Param> params, String permissionCode,Boolean noQueryFlag,String exportSql, Map exportMap, Object... objects) {
		int queryType = 0;
		if(objects.length > 0) {
			queryType = (int) objects[0];
		}
		String sql = "";
		String dgCode = "";
	
		if(viewCode.split(",").length < 2){
			sql = sqlService.getSqlQuery(viewCode, type);
		}else{
			dgCode = viewCode.split(",")[1];
			viewCode = viewCode.split(",")[0];
			sql = sqlService.getDGSqlQuery(dgCode,type);
		}
		//如果存在导出下配置的sql则进行替换
		
		if(!exportSql.trim().isEmpty() ) {
			if(page.isExportFlag() && sql != null && sql.contains("LEFT OUTER JOIN")){//如果用于导出，sql里的left outer join的内容拼到exportSql里
				String sql2 = sql;
				if(sql2.contains("LEFT OUTER JOIN")){
					sql2 = sql2.substring(sql2.indexOf("LEFT OUTER JOIN"), sql2.length());
					String tableNames[] = sql2.split("LEFT OUTER JOIN");
					for(String str : tableNames){
						if(str!=null && !str.equals("") && str.contains(" ON ")){
							String tableNames2[] = str.split(" ON ");
							if(tableNames2[0]!=null && !tableNames2[0].equals("") && !exportSql.contains(tableNames2[0].trim())){
								exportSql += " LEFT OUTER JOIN" + str;
							}
						}
					}
					sql = exportSql;
				}	
			}else{//如果存在导出下配置的sql则进行替换
				sql=exportSql;	
			}
		} 
		 
		// 自定义字段sql拼接
		sql = generateCustomPropertySql(viewCode, sql);
		String countSql = null;
		if(null != dgCode && !"".equals(dgCode)){
			countSql = sqlService.getDGSqlQuery(dgCode,Sql.TYPE_USED_TOTALS);
		}else{
			countSql = sqlService.getSqlQuery(viewCode,Sql.TYPE_USED_TOTALS);
		}
		if(!exportSql.trim().isEmpty())  {
			//FIXME  有小节配置时,需要将小节信息加入
			countSql="SELECT COUNT(*) count FROM ";	
		}
		User currentUser=(User)getCurrentUser();
		if(sql == null){
			sql = "";
		}
		StringBuilder totalSql = new StringBuilder(sql);
		Boolean crossCompanyFlag = null;
		if (null != sql && sql.length() > 0) {
			StringBuilder s = new StringBuilder();
			StringBuilder queryCond = new StringBuilder();
			List<Object> list = new ArrayList<Object>();
			Map<String,Object> customerSqlListMap = new HashMap<String,Object>();
			boolean hasWhere = false;
			String referenceCondition = "";
			String customerSql = "";
			String customerCondition = "";
			String classifySql = "";
			if (null != params && !params.isEmpty()) {
				Param param = params.get(0);
				if("crossCompanyFlag".equals(param.getName())){
					crossCompanyFlag = Boolean.parseBoolean(param.getValue().toString());
					params.remove(0);
				}
			}
			StringBuilder sortOrderByStr = new StringBuilder("");
			if (null != params && !params.isEmpty()) {
				s.append(" WHERE ((");
				hasWhere = true;
				String advQuery = "";
				String classifyCodes = "";
				List<Object> advValues = null;
				String fastQuery = "";
				List<Object> fastValues = null;
				String extraQuery = "";
				List<Object> customerValues = null;
				List<Object> extraQueryValues = null;
				List<Object> customerSqlValues = null;
				List<Object> classifySqlValues = null;
				//组合where条件
				for (int i = 0; i < params.size(); i++) {
					Param param = params.get(i);
					
					if("classifySql".equals(param.getName())){
						classifySql = (String) param.getValue();
						continue;
					}
					
					if("classifySqlValues".equals(param.getName())){
						classifySqlValues = (List<Object>) param.getValue();
						continue;
					}
					
					if(type == Sql.TYPE_LIST_REFERENCE && "referenceCondition".equals(param.getName())) {
						referenceCondition = (String) param.getValue();
						continue;
					}
					
					if("customerValues".equals(param.getName())){
						customerValues = (List<Object>) param.getValue();
						continue;
					}
					if("customerSqlValues".equals(param.getName())){
						customerSqlValues = (List<Object>) param.getValue();
						continue;
					}
					if("customerSqlListMap".equals(param.getName())){
						customerSqlListMap = (Map<String,Object>) param.getValue();
						continue;
					}
					if("customerCondition".equals(param.getName())){
						customerCondition = (String) param.getValue();
						continue;
					}
					if("customerSql".equals(param.getName())){
						customerSql = (String)param.getValue();
						continue;
					}
					
					if ("advQueryCond".equals(param.getName())) {
						AdvQueryCondition cond = conditionService.toSql((String) param.getValue());
						if (cond != null) {
							advValues = cond.getValues();
							advQuery = cond.getSql();
						}
						continue;
					}
					//数据分类内的高级查询
					if ("classifyCodes".equals(param.getName())) {
						classifyCodes = (String)param.getValue();
						continue;
					}
					
					if ("fastQueryCond".equals(param.getName())) {
						AdvQueryCondition cond = conditionService.toSql((String) param.getValue());
						if (cond != null) {
							fastValues = cond.getValues();
							fastQuery = cond.getSql();
						}
						continue;
					}
					
					if ("extraQueryCond".equals(param.getName())) {
						Map<String,String> oneToManyParams = new HashMap<String,String>();
						oneToManyParams = (Map<String, String>) param.getValue();
						String json = sqlService.getExtraQueryJson(viewCode);
						Matcher matcher = oneToManyPattern.matcher(json);
						while (matcher.find()) {
							String tag = (matcher.group(2));
							String subTag = tag.substring(2, tag.length()-2);
							if(null != oneToManyParams.get(subTag) && ((String)(oneToManyParams.get(subTag))).length() > 0) {
								json = json.replace(tag, oneToManyParams.get(subTag).replace("\"", "SYMBOL_DOUBLE_QUOTE"));
							} else {
								json = json.replace(tag, "");
							}
						}
						if(null != json && json.length() > 0) {
							AdvQueryCondition cond = conditionService.toSql(json);
							if (cond != null) {
								extraQueryValues = cond.getValues();
								extraQuery = cond.getSql();
							}
						}
						continue;
					}
					if ("dataTable-sortColKey".equals(param.getName())) {
						String sortValue = (String) param.getValue();
						String key = null, columnName = null,customKey = null;
						if(sortValue.indexOf("::") > 0) {
							key = sortValue.split("::")[0];
							columnName = sortValue.split("::")[1];
							if(key.indexOf(".") > 0 && key.contains("attrMap")){//自定义字段
								key = key.split("\\.")[1];
								if(key.startsWith("cp_")){//判断排序字段是否是关联模型的字段
									key = key.substring(3).replace("_", ".");
								}
							}
						} else if (sortValue.indexOf(".") > 0){
							customKey = sortValue.split("\\.")[0];
							if(customKey.contains("attrMap")){
								key =customKey;
								columnName = sortValue.split("\\.")[1];
							}else{
								key = sortValue;
							}
						} else {
							key = sortValue;
						}
						int lastDotPos = key.lastIndexOf('.');
						if(null == columnName) {
							columnName = Inflector.getInstance().columnize(key.substring(lastDotPos + 1));
						}
						String tableAlias = lastDotPos < 0 ? "\"costBudge\"" : "\"" + key.substring(0, lastDotPos) + "\"";
						if("\"pending\"".equals(tableAlias)) {
							tableAlias = "\"p\"";
						}
						sortOrderByStr.append(tableAlias).append(".").append(columnName);
						continue;
					}
					if ("dataTable-sortColOrder".equals(param.getName())) {
						sortOrderByStr.append(" ").append((String) param.getValue());
						continue;
					}
					if(param.getName()!=null&&param.getName().startsWith("\"tree-")){
						if(param.getName().startsWith("\"tree-layRec-")){
							String treeCondition = sqlService.getSqlQuery(viewCode,Sql.TYPE_USED_TREE);
							if (treeCondition!=null && treeCondition.trim().length() > 0) {
								if (hasWhere){
									s.append(" AND ");
								}else{
									s.append(" WHERE (");
									hasWhere = true;
								}
									
								s.append(treeCondition);
								if(param.getLikeType() == Param.EQUAL_LIKELEFT) {
									list.add(param.getValue());
									list.add((String) param.getValue()+"-%");
								} 
								if(param.getLikeType() == Param.LIKE_UNSUPPORT) { 
									list.add(param.getValue());
								}
							}
						}
						continue;
					}
					if(param.getName()!=null&&!param.getName().startsWith("\"tree-") && param.getLikeType() == Param.EQUAL_LIKELEFT){
						s.append(" AND ( ").append(param.getName()).append("= ? ").append(" OR ")
							.append(param.getName()).append(" like ? )");
						list.add(param.getValue());
						list.add(param.getValue()+"-%");
						continue;
					}
					if (i > 0){
						s.append(" AND ");
					}
					if((null != param.getContainLower() && param.getContainLower())) {
						s.append(" ( ");
					}
					if(!param.getCaseSensitive()) {
						if(param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_LEFT || param.getLikeType() == Param.LIKE_RIGHT || param.getLikeType() == Param.LIKE_UNSUPPORT  || param.getLikeType() == Param.NONE_EQUAL) {
							if(!"DATE".equals(param.getColumnType()) && !"DATETIME".equals(param.getColumnType()) && !"LONG".equals(param.getColumnType()) && !"INTEGER".equals(param.getColumnType()) && !"DECIMAL".equals(param.getColumnType()) && !"BOOLEAN".equals(param.getColumnType())) {
								s.append(" UPPER (");
							}
						}
					}
					if(param.getLikeType() != Param.MULTI_LIKE) {
						s.append(param.getName());
					}
					if(!param.getCaseSensitive()) {
						if(param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_LEFT || param.getLikeType() == Param.LIKE_RIGHT || param.getLikeType() == Param.LIKE_UNSUPPORT  || param.getLikeType() == Param.NONE_EQUAL) {
							if(!"DATE".equals(param.getColumnType()) && !"DATETIME".equals(param.getColumnType()) && !"LONG".equals(param.getColumnType()) && !"INTEGER".equals(param.getColumnType()) && !"DECIMAL".equals(param.getColumnType()) && !"BOOLEAN".equals(param.getColumnType())) {
								s.append(") ");
							}
						}
					}
					String exp = " = ?";
					if (param.getLikeType() == Param.LIKE_UNSUPPORT) {
						s.append(" = ?");
					} else if(param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_RIGHT || param.getLikeType() == Param.LIKE_LEFT) {
						s.append(" LIKE ?");
						exp = " LIKE ?";
					} else if(param.getLikeType() == Param.GREATE_EQUAL) {
						s.append(" >= ?");
						exp = " >= ?";
					}else if(param.getLikeType() == Param.LESS_EQUAL) {
						s.append(" <= ?");
						exp = " <= ?";
					}else if (param.getLikeType() == Param.GREATE_THAN) {
						s.append(" > ?");
						exp = " > ?";
					}else if (param.getLikeType() == Param.LESS_THAN) {
						s.append(" < ?");
						exp = " < ?";
					}else if (param.getLikeType() == Param.NONE_EQUAL) {
						s.append(" <> ?");
						exp = " <> ?";
					}else if (param.getLikeType() == Param.MULTI_LIKE) {
						exp = " LIKE ?";
						String multiValue = param.getValue().toString();
						String[] values = multiValue.split(",");
						StringBuilder multiSb = new StringBuilder();
						for(int m = 0; m < values.length; m++) {
							if(null != values[m] && values[m].length() > 0) {
								multiSb.append(" OR ");
								multiSb.append(param.getName()).append(" LIKE ? ");
								list.add("%," + values[m] + ",%");
							}
						}
						if(multiSb.length() > 0) {
							s.append(" ( ");
							s.append(multiSb.toString().substring(4));
							s.append(" ) ");
						}
					}else {}
					if(param.getLikeType() == Param.LIKE_ALL || param.getLikeType() == Param.LIKE_LEFT || param.getLikeType() == Param.LIKE_RIGHT) {
						String upperStr = (String) param.getValue();
						if(!param.getCaseSensitive()) {
							upperStr = upperStr.toUpperCase();
						}
						if(param.getLikeType() == Param.LIKE_ALL) {
							param.setValue('%' + upperStr + '%');
						}
						if(param.getLikeType() == Param.LIKE_LEFT) {
							param.setValue(upperStr + '%');
						}
						if(param.getLikeType() == Param.LIKE_RIGHT) {
							param.setValue('%' + upperStr);
						}	
					}
					if(param.getLikeType() == Param.LIKE_UNSUPPORT  || param.getLikeType() == Param.NONE_EQUAL) {
						if ("DATETIME".equals(param.getColumnType()) || "DATE".equals(param.getColumnType())) {
							if(param.getValue() instanceof String){
								param.setValue(DateUtils.ecDateFormat((String) param.getValue()));
							}
						} else if ("LONG".equals(param.getColumnType())){
							if(param.getValue() instanceof String){
								param.setValue(Long.parseLong((String) param.getValue()));
							}
						} else if ("INTEGER".equals(param.getColumnType())) {
							if(param.getValue() instanceof String){
								param.setValue(Integer.parseInt((String) param.getValue()));
							}
						} else if ("DECIMAL".equals(param.getColumnType())) {
							if(param.getValue() instanceof String){
								param.setValue(new BigDecimal((String) param.getValue()));
							}
						} else {
							if(param.getValue() instanceof String){
								String upperStr = (String) param.getValue();
								if(!param.getCaseSensitive()) {
									upperStr = upperStr.toUpperCase();
								} 
								param.setValue(upperStr);
							} else {
								param.setValue(param.getValue());
							}
						}
					}
					if(param.getLikeType() == Param.GREATE_EQUAL || param.getLikeType() == Param.GREATE_THAN || param.getLikeType() == Param.LESS_EQUAL || param.getLikeType() == Param.LESS_THAN) {
						if ("DATETIME".equals(param.getColumnType()) || "DATE".equals(param.getColumnType())) {
							if(param.getValue() instanceof String){
								param.setValue(DateUtils.ecDateFormat((String) param.getValue()));
							}
						} else if ("LONG".equals(param.getColumnType())){
							if(param.getValue() instanceof String){
								param.setValue(Long.parseLong((String) param.getValue()));
							}
						} else if ("INTEGER".equals(param.getColumnType())) {
							if(param.getValue() instanceof String){
								param.setValue(Integer.parseInt((String) param.getValue()));
							}
						} else if ("DECIMAL".equals(param.getColumnType())) {
							if(param.getValue() instanceof String){
								param.setValue(new BigDecimal((String) param.getValue()));
							}
						}					

					}
					
					if(param.getLikeType() != Param.MULTI_LIKE) {
						list.add(param.getValue());
					}
					if(null != param.getContainLower() && param.getContainLower()) {
						String prefix = param.getName().substring(0, param.getName().lastIndexOf("."));
						String columnName = param.getName().substring(param.getName().lastIndexOf(".") + 1);
						if(null != param.getModelInfo() && param.getModelInfo().length > 0) {
							String entityInfo = (param.getModelInfo())[0];
//							String serviceInfo = (param.getModelInfo())[1];
							String layRecColumnName = null;
							if(param.getModelInfo().length > 2) {
								layRecColumnName = (param.getModelInfo())[2];
							}
							//非树形定义getContainLower方法，如果是树形实现IModelTreeLayRecService接口的getContainLower方法
							List<String> layRecs = this.getContainLower(entityInfo, Inflector.getInstance().columnToField(columnName), exp, param.getValue(), false);
//							ServiceReference ref = bundleContext.getServiceReference(serviceInfo);
//							List<String> layRecs = null;
//							if(null != ref) {
//								IModelTreeLayRecService layRecService = (IModelTreeLayRecService) bundleContext.getService(ref);
//								layRecs = layRecService.getContainLower(entityInfo, Inflector.getInstance().columnToField(columnName), exp, param.getValue(), false);
//							} else {
//								layRecs = getContainLower(entityInfo, Inflector.getInstance().columnToField(columnName), exp, param.getValue(), false);
//							}
							if(null != layRecs && !layRecs.isEmpty()) {
								String layRecCond = "";
								for (String layRec : layRecs) {
									layRecCond += " OR " + prefix + "." + (layRecColumnName == null ? "LAY_REC" : layRecColumnName) +  " = ?";
									layRecCond += " OR " + prefix + "." + (layRecColumnName == null ? "LAY_REC" : layRecColumnName) +  " like ?";
									list.add(layRec);
									list.add(layRec + "-%");
								}
								s.append(layRecCond);
							}
							s.append(" ) ");
						}
					}
				}
					if (advQuery != null && advQuery.length() > 0) {
						s.append(" AND ").append(advQuery);
						if (advValues != null) {
							list.addAll(advValues);
						}
					}
					if (fastQuery != null && fastQuery.length() > 0) {
						s.append(" AND ").append(fastQuery);
						if (fastValues != null) {
							list.addAll(fastValues);
						}
					}
					if (extraQuery != null && extraQuery.length() > 0) {
						s.append(" AND ").append(extraQuery);
						if (extraQueryValues != null) {
							list.addAll(extraQueryValues);
						}
					}
					if(customerCondition !=null && customerCondition.length()>0){
						s.append(" AND ").append(customerCondition);
						if(customerValues!=null && customerValues.size()>0){
							list.addAll(customerValues);
						}
					}
					if(customerSql != null && customerSql.length()>0){
						s.append(" AND ").append(customerSql);
						if(customerSqlValues!=null && customerSqlValues.size()>0){
							list.addAll(customerSqlValues);
						}
					}
					if(classifySql != null && classifySql.length() > 0){
						s.append(" AND (").append(classifySql).append(")");
						if(classifySqlValues != null && classifySqlValues.size() > 0){
							list.addAll(classifySqlValues);
						}
					}
					
					if(type == Sql.TYPE_LIST_REFERENCE){
						if(null != crossCompanyFlag && !crossCompanyFlag && !getCurrentCompanyId().equals(1L)){
							s.append(" AND \"costBudge\".CID in (1,").append(getCurrentCompanyId()+")");
						}
					}
					
	//				if(type == Sql.TYPE_LIST_QUERY || type == Sql.TYPE_LIST_PENDING || type == Sql.TYPE_LIST_REFERENCE) {
	//					if(type == Sql.TYPE_LIST_PENDING) {
	//						s.append(" AND \"p\".CID = ").append(getCurrentCompanyId());
	//					} else if(type == Sql.TYPE_LIST_QUERY){
	//						s.append(" AND \"costBudge\".CID = ").append(getCurrentCompanyId());
	//					} else if(type == Sql.TYPE_LIST_REFERENCE){
	//						if(null != crossCompanyFlag && !crossCompanyFlag){
	//							s.append(" AND \"costBudge\".CID = ").append(getCurrentCompanyId());
	//						}
	//					}
	//				}
					s.append(" ) ");
			}
			// ////PowerCondition

			//组合自定义条件
			String customCondition=getCustomCondition(page, viewCode, type, processKey, params,list);
			if (customCondition!=null&&customCondition.trim().length() > 0) {
				if (hasWhere){
					s.append(" AND ");
				}else{
					s.append(" WHERE (");
					hasWhere = true;
				}
					
				s.append(customCondition);
			}
			
			//一个实体只有一个权限操作
			if(permissionCode == null || permissionCode.length() == 0) {
				permissionCode = viewCode;
			}
			View view = viewServiceFoundation.getView(viewCode);
			ExtraView extraView = null;
			boolean isTreeView=false;
			if (null != view.getIsShadow() && view.getIsShadow() && null != view.getShadowView()) {
				extraView = view.getShadowView().getExtraView();
			} else {
				extraView = view.getExtraView();
			}
			if (null != extraView && extraView.getConfigMap() != null) {
				Map<String, Object> layout = (Map<String, Object>) extraView.getConfigMap().get("layout");
				if (layout != null && !layout.isEmpty()) {
					List<Map<String, Object>> sections = (List<Map<String, Object>>) layout.get("sections");
					if(null != sections) {
						for (Map section : sections) {
							if (section.get("regionType").toString().equals("LISTPT")) {
								Map<String, Object> listProperties = (Map<String, Object>) section.get("listProperty");
								if (null != listProperties && !listProperties.isEmpty()) {
									for (Map.Entry<String, Object> listProperty : listProperties.entrySet()) {
										if (listProperty.getKey().equals("isTreeView")) {
											if (new Boolean(listProperty.getValue().toString()).equals(Boolean.TRUE)) {
												isTreeView=true;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			boolean needPermission = true;
			if(view.getType() == ViewType.REFERENCE || view.getType() == ViewType.REFTREE){
				if(view.getShowType().equals(ShowType.PART)){
					//取布局视图
					View layoutView = viewServiceFoundation.getView(permissionCode);
					if(null != layoutView && !layoutView.getIsPermission()){//未启用权限
						needPermission = false;
					}
					if(null == layoutView) {
						layoutView = getLayoutView(permissionCode);
						if(null != layoutView && !layoutView.getIsPermission()){//未启用权限
							needPermission = false;
						}	
					}
				} else {
					if(null != view && !view.getIsPermission()){//未启用权限
						needPermission = false;
					}
				}
			}
			//加入权限过滤
			if(needPermission){
				String powerCode = permissionCode + "_self";
				if(view.getType() == ViewType.REFERENCE || view.getType() == ViewType.REFTREE){
					if(view.getShowType().equals(ShowType.PART)){
						View layoutView = viewServiceFoundation.getView(permissionCode);
						if(null == layoutView  || !(layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0)){
							powerCode = permissionCode;
						}else if((layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0))  {
							powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + layoutView.getPermissionCode();
						}
						if(null == layoutView)  {
							layoutView = getLayoutView(permissionCode);
							if(null == layoutView  || !(layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0)){
									powerCode = permissionCode;
							}else if((layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0))  {
									powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + layoutView.getPermissionCode();
							}
						}
					}else  {
						if(view.getIsPermission() && view.getPermissionCode().trim().length() > 0){
							powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + view.getPermissionCode();
						}
					}
				}else if(null != dgCode && !"".equals(dgCode)){
					DataGrid dataGrid = viewServiceFoundation.getDataGrid(dgCode);
					if(null != dataGrid.getDataGridType() && dataGrid.getDataGridType() == 1 && null != dataGrid.getIsPermission() && dataGrid.getIsPermission()){
						powerCode = dataGrid.getTargetModel().getCode() + "_" + dataGrid.getPermissionCode();
					}
				}
				String powerCodeSql = "select m.code as code from base_MenuOperate m where m.code = ? and m.valid = 1";
				List<Object> powerCodeList =  costBudgeDao.createNativeQuery(powerCodeSql, powerCode).list();
				if(powerCodeList.size() > 0) {
					powerCode = powerCodeList.get(0).toString();
				} else {
					String powerOperateSql = "select m.code as code from base_MenuOperate m where m.entity_Code=? and m.valid=1 and Power_Flag=1";
					List<Object> checkList =  costBudgeDao.createNativeQuery(powerOperateSql, "SESWssFe_1.0.0_costBudget").list();
					if(checkList.size()>0){
						powerCode = checkList.get(0).toString();
					}
				}	
					String	pc = dataPermissionService.getBaseModelPowerCondition(this.creatorService.getStaffFromSession().getUser(), powerCode, "\"costBudge\"","SESWssFe_1.0.0_costBudget",customCondition,"SESWSSFE_COST_BUDGES",false);
				if (pc.trim().length() > 0) {
					if (hasWhere){
						s.append(" AND ");
					}else{
						s.append(" WHERE (");
						hasWhere = true;
					}
						
					s.append(pc);
				}
			}
			
			if(null!=processKey&&!processKey.equals("")){
				if(type == Sql.TYPE_LIST_QUERY){
					
					if (hasWhere){
						s.append(" AND ");
					}else{
						s.append(" WHERE (");
						hasWhere = true;
					}
					String[] arr=processKey.split(",");
					String pendingSql="";
					for(String str:arr){
						if(!"".equals(pendingSql)){
							pendingSql+=" or D.PROCESS_KEY = ? ";
						}else{
							pendingSql+=" D.PROCESS_KEY = ? ";
						}
						list.add(str);
					}
					if(!"".equals(pendingSql)){
						s.append(" \"costBudge\".TABLE_INFO_ID IN (  SELECT   D.TABLE_INFO_ID "+
	                      "   FROM   "+SESWssFeCostBudgeDealInfo.TABLE_NAME+" d "+
	                      "  WHERE   ("+pendingSql+") "+
	                      " GROUP BY   D.TABLE_INFO_ID) ");
					}
					
				}else if(type==Sql.TYPE_LIST_PENDING){
					if (hasWhere){
						s.append(" AND ");
					}else{
						s.append(" WHERE (");
						hasWhere = true;
					}
					
					String[] arr=processKey.split(",");
					String pendingSql="";
					for(String str:arr){
						if(!"".equals(pendingSql)){
							pendingSql+=" or  \"p\".PROCESS_KEY = ? ";
						}else{
							pendingSql+=" \"p\".PROCESS_KEY = ? ";
						}
						list.add(str);
					}
					if(!"".equals(pendingSql)){
						s.append(" ("+pendingSql+")");
					}
				}
				
			}
			if(s != null && s.length()>0 && s.toString().contains("WHERE")){
				s.append(") ");
			}
			
			
			if (referenceCondition != null && referenceCondition.length() > 0) {
				s.append(" AND (").append(referenceCondition).append(")");
			}
			if(queryType == 1) {
				s.append(" AND \"costBudge\".STATUS = 99 ");
			}
			// 开始处理排序，避免在统计时带入排序条件
			StringBuilder orderPart = new StringBuilder();
			orderPart.append(" ORDER BY ");
			String colOrderByStr = null;
			if (null != dgCode && !"".equals(dgCode)) {
				colOrderByStr = sqlService.getDGSqlQuery(dgCode,Sql.TYPE_USED_ORDERBY);
			} else {
				colOrderByStr = sqlService.getSqlQuery(viewCode,Sql.TYPE_USED_ORDERBY);
			}
			if(null != colOrderByStr && colOrderByStr.length() > 0) {
				if(sortOrderByStr.toString().length() > 0) {
					String[] colOrderByArr = colOrderByStr.substring(1).split(",");
					String[] sortOrderByArr = sortOrderByStr.toString().split(" ");
					Boolean flag = false;
					for(String colOrderBy : colOrderByArr) {
						if(colOrderBy.indexOf(sortOrderByArr[0] + " ") > -1) {
							colOrderByStr = colOrderByStr.replace(colOrderBy, sortOrderByStr.toString());
							flag = true;
							break;
						}
					}
					if(!flag) {
						orderPart.append(sortOrderByStr).append(",");
					} 
					orderPart.append(colOrderByStr.substring(1)).append(",");
				} else {
					orderPart.append(colOrderByStr.substring(1)).append(",");
				}
			} else {
				if(sortOrderByStr.toString().length() > 0) {
					orderPart.append(sortOrderByStr.toString()).append(",");
				} 
			}
			if(type == Sql.TYPE_LIST_PENDING) {
				orderPart.append(" \"p\".ID DESC");
			} else {
				if(isTreeView) {
					orderPart.append(" \"costBudge\".LAY_REC ASC, \"costBudge\".SORT ASC");
				} else {
					orderPart.append(" \"costBudge\".LAY_REC ASC, \"costBudge\".ID DESC");
				}
			}
			Object[] arr = list.toArray();
			totalSql.append(s);
			String realSql = totalSql.toString() + orderPart.toString();
			Map<String, String> maps = new HashMap<String, String>();
			countSql += " ( " + totalSql.toString() + " ) T";
			// 突破ORACLE 30个字符限制
			if(DbUtils.getDbName().equals("oracle")){
			realSql = matchSql(pattern, realSql, "T", maps, 2, 4);
			countSql = replaceSql(pattern, countSql, maps, 4, 2);
			realSql = matchSql(p, realSql, "E", null, 4, 6);
			countSql = matchSql(p, countSql, "E", null, 4, 6);
			//组织总条数，合计SQL
			countSql = replaceSql(countPattern, countSql, maps, 4, 2);
			if(isTreeView) {
				page.setPaging(false);
			}
			}
			//计算条数
			if (page.needCount()) {
				//String countSql = "SELECT COUNT(*) FROM (" + realSql + ")";
				//Long count = ((Number) costBudgeDao.createNativeQuery(countSql, arr).uniqueResult()).longValue();
				Long count = 0l;
				Map<String, BigDecimal> resultTotals = new HashMap<String, BigDecimal>();
				
				NativeQuery query=costBudgeDao.createNativeQuery(countSql, arr);
				if(customerSqlListMap!=null&&!customerSqlListMap.isEmpty()){
					for(String key:customerSqlListMap.keySet()){
						query.setParameterList(key, (Object[])customerSqlListMap.get(key));
					}
				}
				List<Map<String, Object>> resultCountList = (List<Map<String, Object>>)query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
				if (null != resultCountList && !resultCountList.isEmpty()) {
					Map<String, Object> resultCounts = resultCountList.get(0);
					for (Map.Entry<String, Object> entry : resultCounts.entrySet()) {
						String key = entry.getKey();
						if(maps.containsKey(key)) {
							key = (String) maps.get(key);
						}
						if (key.equalsIgnoreCase("count")) {
							count = ((Number) (null == entry.getValue() ? 0 : entry.getValue())).longValue();
						} else {
							resultTotals.put(key, BigDecimal.valueOf(((Number) (null == entry.getValue() ? 0 : entry.getValue())).doubleValue()));
						}
					}
			    }
			    if(!page.isExportFlag() && !page.isPaging() && count > page.getMaxPageSize()) {
			    	throw new BAPException(BAPException.Code.RESULT_COUNT_EXCEED_MAX_PAGE_SIZE);
			    }
			    page.setTotalCount(count);
			    page.setResultTotals(resultTotals);
			}
			if(!noQueryFlag)  {
				NativeQuery query = costBudgeDao.createNativeQuery(realSql, arr);
				if(customerSqlListMap!=null&&!customerSqlListMap.isEmpty()){
					for(String key:customerSqlListMap.keySet()){
						query.setParameterList(key, (Object[])customerSqlListMap.get(key));
					}
				}
				List<SESWssFeCostBudge> result = new ArrayList<SESWssFeCostBudge>();
				if(page.isExportFlag()) {  
					result = getResult(page, query, new PendingResultTransformer(SESWssFeCostBudge.class,costBudgeDao,maps,true));
				}else {
					result = getResult(page, query, new PendingResultTransformer(SESWssFeCostBudge.class,costBudgeDao,maps));
				}
				modelServiceFoundation.initCacheData();
				page.setResult(result);
				if(null != hasAttachment && hasAttachment) {
					for (SESWssFeCostBudge costBudge : result) {
						long count = 0L;
						count = documentService.getCountByLinkIdAndType(costBudge.getId(), "SESWssFe_costBudget_costBudge");
						if(count > 0) {
							List<Document> documents = documentService.getByLinkIdAndType(costBudge.getId(), "SESWssFe_costBudget_costBudge");
							if(null != documents && !documents.isEmpty()) {
								costBudge.setDocument(documents.get(0));
								costBudge.setBapAttachmentInfo(documents.get(0).getName() + "@_@BAP@_@更多(" + count + ")");
							}
						}
					}
				}
				
				if(page.isExportFlag()){
					Method getBusKeyMethod = null;
					if(exportMap.get("businessKey")!=null){
						try {
							Property p = (Property) exportMap.get("businessKey");
							String getBusKeyMethodStr = "get" + p.getName().substring(0, 1).toUpperCase() + p.getName().substring(1);
							SESWssFeCostBudge costBudge = new SESWssFeCostBudge();
							getBusKeyMethod = costBudge.getClass().getMethod(getBusKeyMethodStr);
						} catch (NoSuchMethodException | SecurityException e) {
							log.error(e.getMessage(),e);
						}
					}
					Method getMainDisMethod = null;
					if(exportMap.get("mainDisplay")!=null){
						try {
							Property p = (Property) exportMap.get("mainDisplay");
							String getMainDisMethodStr = "get" + p.getName().substring(0, 1).toUpperCase() + p.getName().substring(1);
							SESWssFeCostBudge costBudge = new SESWssFeCostBudge();
							getMainDisMethod = costBudge.getClass().getMethod(getMainDisMethodStr);
						} catch (NoSuchMethodException | SecurityException e) {
							log.error(e.getMessage(),e);
						}
					}
					
					for (SESWssFeCostBudge costBudge : result) {
						Long parentId = costBudge.getParentId();
						if(parentId != null && parentId.longValue() != new Long(-1).longValue()){
							for (SESWssFeCostBudge costBudge2 : result) {
								if(costBudge2.getId() != null && costBudge2.getId().longValue() == parentId.longValue()){
									try {
										if(getBusKeyMethod != null){
											Object busKey = getBusKeyMethod.invoke(costBudge2);
											costBudge.setParentNodeBusinessKey(busKey.toString());
										}
										if(getMainDisMethod != null){
											Object mainDis = getMainDisMethod.invoke(costBudge2);
											costBudge.setParentNodeMainDisplay(mainDis.toString());
										}	
									} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
										log.error(e.getMessage(),e);
									}
								}
							}
						}
					}	
				}	
				
				for (SESWssFeCostBudge costBudge : result) {
				}	
				if(exportSql.trim().isEmpty()){
					getConfigAssoPropsResult(viewCode, dgCode, result); // 获取配置的关联模型字段的结果集
				}
			}
			if(isTreeView) {
				dealListTreePageData(page, viewCode);
			}
		}
	}
	
	
	private View getLayoutView(String permissionCode) {
		if(null!=permissionCode&&permissionCode.indexOf("SESWssFe_1.0.0_costBudget")!=-1) {
				String personalCode=permissionCode.substring(permissionCode.indexOf("SESWssFe_1.0.0_costBudget")+"SESWssFe_1.0.0_costBudget".length()+1);
				if(null!=personalCode&&personalCode.trim().length()>0)  {
						return viewServiceFoundation.getViewWithPermissionCode("SESWssFe_1.0.0_costBudget",personalCode);
				}
		}
		return null;
	}
	
	private void getConfigAssoPropsResult(String viewCode, List<SESWssFeCostBudge> result) {
		getConfigAssoPropsResult(viewCode, null, result);
	}
	
	private void getConfigAssoPropsResult(String viewCode,String dataGridCode, List<SESWssFeCostBudge> result) {
		View view = null;
		DataGrid dataGrid = null;
		List<Field> fields = null;
		Model origModel = null;
		if (null != dataGridCode && !"".equals(dataGridCode)) {
			dataGrid = viewServiceFoundation.getDataGrid(dataGridCode);
			fields = viewServiceFoundation.getFields(dataGrid);
			origModel = dataGrid.getTargetModel();
		} else {
			view = viewServiceFoundation.getView(viewCode);
			fields = viewServiceFoundation.getFields(view);
			origModel = view.getAssModel();
		}
		String origId = modelServiceFoundation.getPropertyColumnName(origModel, "id", false);

		List<Long> ids = new ArrayList<Long>();
		Map<Long, SESWssFeCostBudge> rsMap = new HashMap<Long, SESWssFeCostBudge>();
		for (SESWssFeCostBudge costBudge : result) {
			ids.add(costBudge.getId());
			rsMap.put(costBudge.getId(), costBudge);
		}
		for (Field f : fields) {
			if (f.getRegionType() == RegionType.LISTPT && (f.getCode().startsWith(viewCode + "_LISTPT_ASSO_") || f.getCode().startsWith(dataGridCode + "_LISTPT_ASSO_"))) { // 关联模型字段
				Map<String, Object> map = (Map<String, Object>) SerializeUitls.deserialize(f.getConfig());
				Map<String, Object> fieldMap = (Map<String, Object>) map.get("field");
				if (fieldMap.get("assoFlag") != null && "true".equalsIgnoreCase(fieldMap.get("assoFlag").toString())) {
					String assoConfig = (String) fieldMap.get("assoConfig");
					Map<String, Object> configMap = (Map<String, Object>) SerializeUitls.deserialize(assoConfig);
					if (configMap != null && configMap.size() > 0) {
						String sepBegin1 = configMap.get("separatorBeginLevel1") == null ? "" : configMap.get("separatorBeginLevel1").toString();
						String sepEnd1 = configMap.get("separatorEndLevel1") == null ? "" : configMap.get("separatorEndLevel1").toString();
						String sepBegin2 = configMap.get("separatorBeginLevel2") == null ? "" : configMap.get("separatorBeginLevel2").toString();
						String sepEnd2 = configMap.get("separatorEndLevel2") == null ? "" : configMap.get("separatorEndLevel2").toString();

						List<Map<String, Object>> configList = (List<Map<String, Object>>) configMap.get("config");
						Map<String, Object> cfg1 = configList.get(0);
						String propertyCode1 = (String) cfg1.get("propertyCode");
						String[] propArr1 = propertyCode1.split("\\|\\|");
						Property ftProp1 = modelServiceFoundation.getProperty(propArr1[0]);
						Property prop1 = findAssoProperty(ftProp1.getModel().getCode(), origModel.getCode());
						String id1 = modelServiceFoundation.getPropertyColumnName(prop1.getModel(), "id", false);

						Property prop2 = null;
						String id2 = null;
						for (Map<String, Object> cfgMap : configList) {
							String level = String.valueOf(cfgMap.get("level"));
							if ("2".equals(level)) {
								String propertyCode2 = (String) cfgMap.get("propertyCode");
								String[] propArr2 = propertyCode2.split("\\|\\|");
								Property ftProp2 = modelServiceFoundation.getProperty(propArr2[0]);
								prop2 = findAssoProperty(ftProp2.getModel().getCode(), prop1.getModel().getCode());
								id2 = modelServiceFoundation.getPropertyColumnName(prop2.getModel(), "id", false);
								break;
							}
						}
						List<List<Map<String, Object>>> list1 = new ArrayList<List<Map<String, Object>>>();
						List<List<Map<String, Object>>> list2 = new ArrayList<List<Map<String, Object>>>();
						String lastSep2Level1 = "", lastSep2Level2 = "";
						for (int index = 0; index < configList.size(); index++) {
							Map<String, Object> cfg = configList.get(index);
							String level = String.valueOf(cfg.get("level"));
							String sep1 = cfg.get("separator1") == null ? "" : cfg.get("separator1").toString();
							String sep2 = cfg.get("separator2") == null ? "" : cfg.get("separator2").toString();
							String method = cfg.get("method") == null ? "" : cfg.get("method").toString().toUpperCase();
							String propertyCode = (String) cfg.get("propertyCode");
							String propertyType = String.valueOf(cfg.get("propertyType"));
							StringBuilder fromSql = new StringBuilder(" from ");
							StringBuilder whereSql = new StringBuilder(" where ");
							if ("1".equals(level)) {
								lastSep2Level1 = sep2;
								fromSql.append(prop1.getModel().getTableName());
								whereSql.append(prop1.getModel().getTableName()).append(".").append("VALID = 1");
							} else {
								lastSep2Level2 = sep2;
								fromSql.append(prop2.getModel().getTableName());
								whereSql.append(prop2.getModel().getTableName()).append(".").append("VALID = 1");
							}
							String[] propArr = propertyCode.split("\\|\\|");
							for (int i = 0; i < propArr.length - 1; i++) {
								Property tmpProp = modelServiceFoundation.getProperty(propArr[i]);
								Model tmpModel = tmpProp.getModel();
								Property tmpAssoProp = tmpProp.getAssociatedProperty();
								Model tmpAssoModel = tmpAssoProp.getModel();
								fromSql.append(" left join ").append(tmpAssoModel.getTableName());
								fromSql.append(" on ").append(tmpModel.getTableName()).append(".").append(tmpProp.getColumnName()).append(" = ")
										.append(tmpAssoModel.getTableName()).append(".").append(tmpAssoProp.getColumnName());
								whereSql.append(" and ").append(tmpAssoModel.getTableName()).append(".").append("VALID = 1").append(" ");
							}

							String selectSql = "select " + origModel.getTableName() + "." + origId + " AS OID";
							Property laProp = modelServiceFoundation.getProperty(propArr[propArr.length - 1]);
							if (!"".equals(method)) {
								if ("2".equals(level)) {
									selectSql += "," + prop1.getModel().getTableName() + "." + id1 + " AS ID1";
								}
								if ("COUNT".equalsIgnoreCase(method)) {
									Property laPkProperty = null;
									for (Property p : laProp.getModel().getProperties()) {
										if (p.getIsPk() != null && p.getIsPk()) {
											laPkProperty = p;
											break;
										}
									}
									selectSql += ", " + method + " (" + laProp.getModel().getTableName() + "." + laPkProperty.getColumnName() + ") AS VAL";
								} else {
									selectSql += ", " + method + " (" + laProp.getModel().getTableName() + "." + laProp.getColumnName() + ") AS VAL";
								}
							} else {
								selectSql += ", " + prop1.getModel().getTableName() + "." + id1 + " AS ID1";
								if ("2".equals(level)) {
									selectSql += ", " + prop2.getModel().getTableName() + "." + id2 + " AS ID2";
								}
								selectSql += ", " + laProp.getModel().getTableName() + "." + laProp.getColumnName() + " AS VAL";
								if("SYSTEMCODE".equals(propertyType)){
									selectSql += ", BASE_SYSTEMCODE.VALUE AS REALVAL";
								}
							}

							if ("2".equals(level)) {
								fromSql.append(" left join ").append(prop1.getModel().getTableName()).append(" on ").append(prop2.getModel().getTableName())
										.append(".").append(prop2.getColumnName()).append(" = ").append(prop1.getModel().getTableName()).append(".")
										.append(prop2.getAssociatedProperty().getColumnName());
								whereSql.append(" and ").append(prop1.getModel().getTableName()).append(".").append("VALID = 1");
							}
							fromSql.append(" left join ").append(origModel.getTableName()).append(" on ").append(prop1.getModel().getTableName()).append(".")
									.append(prop1.getColumnName()).append(" = ").append(origModel.getTableName()).append(".")
									.append(prop1.getAssociatedProperty().getColumnName());
							if("SYSTEMCODE".equals(propertyType)){
								fromSql.append(",BASE_SYSTEMCODE");
							}
							whereSql.append(" and ").append(origModel.getTableName()).append(".").append("VALID = 1");
							whereSql.append(" and ").append(origModel.getTableName()).append(".").append(origId).append(" in (:ids)");
							if("SYSTEMCODE".equals(propertyType)){
								whereSql.append(" and ").append(laProp.getModel().getTableName() + "." + laProp.getColumnName()).append("= BASE_SYSTEMCODE.ID");
							}
							String orderSql = " order by ";
							if (!"".equals(method)) {
								whereSql.append(" group by ").append(origModel.getTableName() + "." + origId);
								if ("2".equals(level)) {
									whereSql.append(", ").append(prop1.getModel().getTableName() + "." + id1);
								} 
								orderSql += "2".equals(level) ? "ID1 ASC" : "OID ASC";
							} else {
								orderSql += "2".equals(level) ? "ID2 ASC" : "ID1 ASC";
							}
							String sql = selectSql + fromSql.toString() + whereSql.toString() + orderSql;

							List<Map<String, Object>> rs = new ArrayList<Map<String, Object>>();
							final int PERTIME = 999;
							int count = (ids.size() / PERTIME) + (ids.size() % PERTIME == 0 ? 0 : 1);
							for (int i = 0; i < count; i++) {
								rs.addAll(costBudgeDao.createNativeQuery(sql)
										.setParameterList("ids", ids.subList(PERTIME * i, PERTIME * i + (i < count - 1 ? PERTIME : (ids.size() % PERTIME))))
										.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list());
							}
							if (rs.size() > 0) {
								if("SYSTEMCODE".equals(propertyType)){
									for (Map<String, Object> m : rs) {
										String REALVAL = m.get("REALVAL") == null ? "" : String.valueOf(m.get("REALVAL"));
										m.put("VAL", sep1 + InternationalResource.get(REALVAL, getCurrentLanguage()) + sep2);
									}
								}else{
									for (Map<String, Object> m : rs) {
										if(null != m.get("VAL") && !"".equals(String.valueOf(m.get("VAL")))){
											String val = String.valueOf(m.get("VAL"));
											m.put("VAL", sep1 + val + sep2);
										}else{
											m.put("VAL", "");
										}										
									}
								}
								if ("1".equals(level)) {
									list1.add(rs);
								} else if ("2".equals(level)) {
									list2.add(rs);
								}
							}
						}
						List<Map<String, Object>> fList1 = concatListValue(list1);
						List<Map<String, Object>> fList2 = concatListValue(list2);
						if (fList2 != null) {
							for (Map<String, Object> tmpMap1 : fList1) {
								long tmpId1 = ((Number) tmpMap1.get("ID1")).longValue();
								StringBuilder val2 = new StringBuilder();
								val2.append(sepBegin2);
								for (Map<String, Object> tmpMap2 : fList2) {
									long tmpID2 = ((Number) tmpMap2.get("ID1")).longValue();
									if (tmpId1 == tmpID2) {
										val2.append((String) tmpMap2.get("VAL"));
									}
								}
								String val = val2.toString();
								if (!val.equals(sepBegin2)) {
									val = val.substring(0, val.length() - lastSep2Level2.length());
								}
								val += sepEnd2;
								tmpMap1.put("VAL", tmpMap1.get("VAL") + val);
							}
						}
						if (fList1 != null) {
							for (Long tabId : rsMap.keySet()) {
								StringBuilder val1 = new StringBuilder(sepBegin1);
								for (Map<String, Object> tmpMap1 : fList1) {
									long tmpTabId = ((Number) tmpMap1.get("OID")).longValue();
									if (tmpTabId == tabId) {
										val1.append((String) tmpMap1.get("VAL"));
									}
								}
								if (!val1.toString().equals(sepBegin1)) {
									String val = val1.toString();
									if (fList2 == null || fList2.size() < 1){
										val = val.substring(0, val.length() - lastSep2Level1.length());
									}
									val += sepEnd1;
									rsMap.get(tabId).setAttrObject(f.getCode().replace(".", "_"), val);
								}
							}
						}
					}
				}
			}
		}
	}

	private List<Map<String, Object>> concatListValue(List<List<Map<String, Object>>> list) {
		if (list.size() == 0) {
			return null;
		}
		List<Map<String, Object>> fList = list.get(0);
		for (int i = 1; i < list.size(); i++) {
			List<Map<String, Object>> tmpList = list.get(i);
			for (int j = 0; j < tmpList.size(); j++) {
				String tmpVal = (String) tmpList.get(j).get("VAL");
				Map<String, Object> map = fList.get(j);
				String val = (String) map.get("VAL");
				map.put("VAL", val + tmpVal);
			}
		}
		return fList;
	}

	private Property findAssoProperty(String origModelCode, String assoModelCode) {
		String hql = "from Property p where p.valid = true and p.model.code = ? and p.associatedProperty.model.code = ? and (p.associatedType = ? or p.associatedType = ?)";
		List<Property> list = costBudgeDao.findByHql(hql, new Object[] {origModelCode, assoModelCode, Property.ONE_TO_ONE, Property.MANY_TO_ONE});
		return list.get(0);
	}
	

	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void findDataGridPage(DataGrid dg,final Class dgClass,Page dgPage,final Object orgObj,String condition, List<Object> params){
		Map confMap=dg.getConfigMap();
		Map layoutMap = (Map) confMap.get("layout");
		Map propertyMap = (Map) layoutMap.get("listProperty");
		if(dg.getDataGridType() ==0 && Boolean.TRUE.equals(propertyMap.get("isTreeView"))){
			String conditionSql = (null != condition && condition.trim().length() > 0) ? " and " + condition : "";
			List<Object> list = new ArrayList<Object>();
			list.add(orgObj);
			if(condition != null && condition.trim().length() > 0 && params != null && params.size() > 0){
				list.addAll(params);
			} 
			//String key=dg.getTargetModel().getModelName()+fLTU(dg.getName())+((com.supcon.orchid.orm.entities.AbstractEcFullEntity)orgObj).getId();
			String orgObjId = "";
			try {
				Method method = orgObj.getClass().getMethod("getId");
				orgObjId = String.valueOf((Long) method.invoke(orgObj));
			} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e1) {
				log.error(e1.getMessage(), e1);
			}
			String key=dg.getTargetModel().getModelName()+fLTU(dg.getName())+orgObjId;
			String orgPropertyName=dg.getOrgProperty().getName();
			String targetModelName=fLTL(dg.getTargetModel().getModelName());
			List treeList = new ArrayList();
			Object[] daoparams=new Object[]{dgClass,key,orgPropertyName,targetModelName,conditionSql,list,new boolean[]{false}};
			try {
				Class thisclass=this.getClass();
				java.lang.reflect.Field daoField=thisclass.getDeclaredField(fLTL(dg.getTargetModel().getModelName())+"Dao");	
				java.lang.reflect.Field serviceField=thisclass.getDeclaredField(fLTL(dg.getTargetModel().getModelName())+"Service");	
				Class serviceType=serviceField.getType();
				Class daoType=daoField.getType();
				Object tree=daoType.getMethod("buildTree",Class.class,String.class,String.class,String.class,String.class,List.class,boolean[].class).invoke(daoField.get(this),daoparams);
				Tree.treeToList((com.supcon.orchid.tree.TreeNode)tree, treeList, false);
				treeList=(List)serviceType.getMethod("findByTreeDataGrid"+dg.getOrgProperty().getAssociatedProperty().getModel().getModelName(),new Class[]{Page.class}).invoke(serviceField.get(this),new Object[]{treeList});
			} catch (Exception e) {
				e.printStackTrace();
			}
			dgPage.setResult(treeList);
		}else{
			DetachedCriteria criteria = DetachedCriteria.forClass(dgClass);
			if(null != orgObj){
				criteria.add(Restrictions.eq(dg.getOrgProperty().getName(), orgObj));
			}
			criteria.add(Restrictions.eq("valid", true));
			criteria.addOrder(Order.asc("sort"));
			if(!"".equals(condition) && condition.trim().length() > 0) {
				criteria.add(Restrictions.sqlRestriction(condition.replace("\""+fLTL(dg.getTargetModel().getModelName())+"\".", "{alias}."), params.toArray(), com.supcon.orchid.jdbc.DbUtils.getHibernateTypeByJavaType(params)));
			}
			try {
				Class thisclass=this.getClass();
				java.lang.reflect.Field daoField=thisclass.getDeclaredField(fLTL(dg.getTargetModel().getModelName())+"Dao");	
				Class daoType=daoField.getType();
				daoType.getMethod("findByPage",new Class[]{Page.class,DetachedCriteria.class}).invoke(daoField.get(this),new Object[]{dgPage,criteria});
				java.lang.reflect.Field serviceField=thisclass.getDeclaredField(fLTL(dg.getTargetModel().getModelName())+"Service");	
				Class serviceType=serviceField.getType();
				serviceType.getMethod("findByNormalDataGrid"+dg.getOrgProperty().getAssociatedProperty().getModel().getModelName(),new Class[]{Page.class}).invoke(serviceField.get(this),new Object[]{dgPage});
			} catch (Exception e) {
				e.printStackTrace();
			} 
		}
	}

	@Override
	public String fLTL(String str){
		return com.supcon.orchid.utils.StringUtils.firstLetterToLower(str);
	}

	@Override
	public String fLTU(String str){
		return com.supcon.orchid.utils.StringUtils.firstLetterToUpper(str);
	}
	
	protected EntityTableInfo getTableInfo(SESWssFeCostBudge costBudge,boolean... isImport) {
		EntityTableInfo ti = new EntityTableInfo();


		ti.setOwnerStaffId(costBudge.getOwnerStaffId());
		ti.setOwnerPositionId(costBudge.getOwnerPositionId());
		ti.setOwnerDepartmentId(costBudge.getOwnerDepartmentId());
		
		ti.setCreateStaff(costBudge.getCreateStaff());
		ti.setCreateStaffId(costBudge.getCreateStaffId());
		ti.setCreateTime(costBudge.getCreateTime());
		ti.setDeleteStaff(costBudge.getDeleteStaff());
		ti.setDeleteStaffId(costBudge.getDeleteStaffId());
		ti.setDeleteTime(costBudge.getDeleteTime());
		ti.setCreateDepartmentId(costBudge.getCreateDepartmentId());
		ti.setModifyStaff(costBudge.getModifyStaff());
		ti.setModifyStaffId(costBudge.getModifyStaffId());
		ti.setCreatePositionId(costBudge.getCreatePositionId());
		ti.setPositionLayRec(costBudge.getPositionLayRec());
		ti.setTableNo(costBudge.getTableNo());
		ti.setValid(true);
		ti.setTargetEntityCode("SESWssFe_1.0.0_costBudget");
		ti.setTargetTableName("SESWSSFE_COST_BUDGES");
		
		return ti;
	}
	
	public List<Object[]> mneCodeSearch( String viewCode,  int showNumber, boolean cross, List<Param> params){
		return mneCodeSearch(viewCode, showNumber, cross, params,null,null,null,null);
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public List<Object[]> mneCodeSearch( String viewCode,  int showNumber, boolean cross, List<Param> params,String refViewCode,String currentViewCode,String sqlType,String realPermissionCode){
		List<Object[]> resultList = null;
		List<Object> totalValues = new ArrayList<Object>();
		String customerSql = null;
		List<Object> customerSqlValues = null;
		String customerCondition = null;
		List<Object> customerValues = null;
		Object mneValues = null;
		Object notinValue = null;
		for(Param p : params){
			
			if("customerSql".equals(p.getName())){
				customerSql = (String) p.getValue();
				continue;
			}
			
			if("customerSqlValues".equals(p.getName())){
				customerSqlValues = (List<Object>) p.getValue();
				continue;
			}
			
			if("customerCondition".equals(p.getName())){
				customerCondition = (String) p.getValue();
				continue;
			}

			if("customerValues".equals(p.getName())){
				customerValues = (List<Object>) p.getValue();
				continue;
			}
			
			
			if("mneValues".equals(p.getName())){
				mneValues =  (Object) p.getValue();
				continue;
			}
			
			if("notinValue".equals(p.getName())){
				notinValue =  (Object) p.getValue();
				continue;
			}
		}
		
		String sql = sqlService.getSqlQuery(viewCode, Sql.TYPE_USED_MNECODE);
		if (null != sql && sql.length() > 0) {
			StringBuilder mnecodeSql = new StringBuilder();
			mnecodeSql.append(sql);
			//助记码权限,一个实体只有一个权限操作
			String  powerSql="";
			Boolean searchRefView=false;
			Boolean innerJoinAppendFlag = false;
			String  permissionCode = viewCode;
			if(realPermissionCode!=null&&!realPermissionCode.isEmpty())  {
				permissionCode = realPermissionCode;
			}
			StringBuilder sb=new StringBuilder();
			if(refViewCode!=null&&!refViewCode.equals(""))  {
				View refView=viewServiceFoundation.getView(refViewCode);
				//判断是否有参照视图,没有则抛出异常
				if(null==refView)  {
					throw new BAPException(BAPException.Code.REFERVIEW_NOT_FOUND,refViewCode);
				}	
				//未启用权限,使用主列表视图的权限
				String powerCode = permissionCode + "_self";
				boolean needPermission = true;
				if(refView.getType() == ViewType.REFERENCE || refView.getType() == ViewType.REFTREE){
					if(refView.getShowType().equals(ShowType.PART)){
						//取布局视图
						View layoutView = viewServiceFoundation.getView(permissionCode);
						if(null != layoutView && !layoutView.getIsPermission()){//未启用权限
							needPermission = false;
						}
						if(null == layoutView) {
							layoutView = getLayoutView(permissionCode);
							if(null != layoutView && !layoutView.getIsPermission()){//未启用权限
								needPermission = false;
							}	
						}
					} else {
						if(null != refView && !refView.getIsPermission()){//未启用权限
							needPermission = false;
						}
					}
				}
				if(needPermission)  {
					if(null == refView ){
						powerCode = permissionCode;
					}else if(refView.getShowType().equals(ShowType.PART))  {
						View layoutView = viewServiceFoundation.getView(permissionCode);
						if(null == layoutView  || !(layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0)){
							powerCode = permissionCode;
						}else if((layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0))  {
							powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + layoutView.getPermissionCode();
							searchRefView=true;
						}
						if(null == layoutView)  {
							layoutView = getLayoutView(permissionCode);
							if(null == layoutView  || !(layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0)){
									powerCode = permissionCode;
							}else if((layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0))  {
									powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + layoutView.getPermissionCode();
							}
						}
					} else if(refView.getIsPermission() && refView.getPermissionCode().trim().length() > 0){
						powerCode ="SESWssFe_1.0.0_costBudget_CostBudge" + "_" + refView.getPermissionCode();
						searchRefView=true;
					}
					String powerCodeSql = "select m.code as code from base_MenuOperate m where m.code = ? and m.valid = 1";
					List<Object> powerCodeList =  costBudgeDao.createNativeQuery(powerCodeSql, powerCode).list();
					if(powerCodeList.size() > 0) {
						powerCode = powerCodeList.get(0).toString();
					} else {
						String powerOperateSql = "select m.code as code from base_MenuOperate m where m.entity_Code=? and m.valid=1 and Power_Flag=1";
						List<Object> checkList =  costBudgeDao.createNativeQuery(powerOperateSql, "SESWssFe_1.0.0_costBudget").list();
						if(checkList.size()>0){
							powerCode = checkList.get(0).toString();
						}
					}
						powerSql  = dataPermissionService.getBaseModelPowerCondition(this.creatorService.getStaffFromSession().getUser(), powerCode, "\"costBudge\"","SESWssFe_1.0.0_costBudget","","SESWSSFE_COST_BUDGES",false);
					//if(!searchRefView&&refView.getAssModel().getEntity().getWorkflowEnabled())  {
						//查询主列表视图的权限(表单类型)
						//	sb.append(" INNER JOIN WF_PENDING \"p\" ON \"p\".TABLE_INFO_ID=\"costBudge\".TABLE_INFO_ID ");
						//	sb.append(" WHERE  \"costBudge\".STATUS <> 0  ");
					//}
					//powerSql = dataPermissionService.getBaseModelPowerCondition(this.creatorService.getStaffFromSession().getUser(), powerCode, "\"costBudge\"","SESWssFe_1.0.0_costBudget","","SESWSSFE_COST_BUDGES",false);
					if(sb.length()>0) {
						sb.append(" AND ");
					}
					sb.append(powerSql);
				}
			}else {
				//如果未关联参照视图则使用当前列表的查询权限
				if(currentViewCode!=null&&currentViewCode.trim().length()>0)  {
					boolean needPermission=true;
					View view=viewServiceFoundation.getView(currentViewCode);
					String powerCode = permissionCode + "_self";
					if(view.getType() == ViewType.REFERENCE || view.getType() == ViewType.REFTREE){
						searchRefView=true;
						if(view.getShowType().equals(ShowType.PART)){
							View layoutView = viewServiceFoundation.getView(permissionCode);
							if(null == layoutView  || !(layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0)){
								powerCode = permissionCode;
								needPermission=false;
							}else if((layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0))  {
								powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + layoutView.getPermissionCode();
							}
							if(null == layoutView)  {
								layoutView = getLayoutView(permissionCode);
								if(null == layoutView  || !(layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0)){
									powerCode = permissionCode;
								}else if((layoutView.getIsPermission() && layoutView.getPermissionCode().trim().length() > 0))  {
									powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + layoutView.getPermissionCode();
									needPermission=true;
								}
							}
						}else  {
							if(view.getIsPermission() && view.getPermissionCode().trim().length() > 0){
								powerCode = "SESWssFe_1.0.0_costBudget_CostBudge" + "_" + view.getPermissionCode();
							}else {
								needPermission=false;
							}
						}
					}
					if(needPermission)  {
						String powerCodeSql = "select m.code as code from base_MenuOperate m where m.code = ? and m.valid = 1";
						List<Object> powerCodeList =  costBudgeDao.createNativeQuery(powerCodeSql, powerCode).list();
						if(powerCodeList.size() > 0) {
							powerCode = powerCodeList.get(0).toString();
						} else {
							String powerOperateSql = "select m.code as code from base_MenuOperate m where m.entity_Code=? and m.valid=1 and Power_Flag=1";
							List<Object> checkList =  costBudgeDao.createNativeQuery(powerOperateSql, "SESWssFe_1.0.0_costBudget").list();
							if(checkList.size()>0){
								powerCode = checkList.get(0).toString();
							}
						}	
							powerSql  = dataPermissionService.getBaseModelPowerCondition(this.creatorService.getStaffFromSession().getUser(), powerCode, "\"costBudge\"","SESWssFe_1.0.0_costBudget","","SESWSSFE_COST_BUDGES",false);
						if(sb.length()>0) {
							sb.append(" AND ");
						}
						sb.append(powerSql);
					}
				}
				
			}
		
			
			
			if(!innerJoinAppendFlag)  {
				if(!sb.toString().trim().startsWith("WHERE"))  {
					mnecodeSql.append(" WHERE ");
				}
			}
			if(sb != null && sb.length() > 0 && !sb.toString().trim().endsWith(" AND")) {
				sb.append(" AND ");
			}
			mnecodeSql.append(sb);
			
			mnecodeSql.append("  (\"").append("costBudge.mc\"").append(".MNE_CODE) like (?) escape '&' AND \"costBudge\".VALID = 1");
			totalValues.add(mneValues);
			
			if(customerSql != null && customerSql.length() > 0){
				mnecodeSql.append(" AND (").append(customerSql).append(")");
				if(customerSqlValues!=null&&customerSqlValues.size()>0){
					totalValues.addAll(customerSqlValues);
				}
			}
			
			if(customerCondition != null && customerCondition.length() > 0){
				mnecodeSql.append(" AND (").append(customerCondition).append(")");
				if(customerValues!=null&&customerValues.size()>0){
					totalValues.addAll(customerValues);
				}
			}
			
			if(!cross){
				if(isSingleMode){
					mnecodeSql.append(" AND \"costBudge\".CID = ?");
					totalValues.add(getCurrentCompanyId());
				}else{
					//当前公司不是集团情况下查询集团和本公司数据
					if(!getCurrentCompanyId().equals(1L)){
						mnecodeSql.append(" AND (\"costBudge\".CID = 1 OR \"costBudge\".CID = ?)");
						totalValues.add(getCurrentCompanyId());
					}
				}
			}
			
			//组合自定义条件
			String customCondition=getCustomMneCondition(viewCode,  showNumber, cross,  params, refViewCode, currentViewCode, sqlType, realPermissionCode);
			if (customCondition!=null&&customCondition.trim().length() > 0) {
				
				if(customCondition != null && customCondition.length() > 0 && !customCondition.toString().trim().startsWith("AND") ) {
					mnecodeSql.append(" AND ");
				}
				mnecodeSql.append(customCondition);
			}
			
			if(notinValue != null){
				mnecodeSql.append(" and (\"").append("costBudge.mc\"").append(".COST_BUDGE) not in ("+notinValue+")");
			}
			
			NativeQuery query = costBudgeDao.createNativeQuery(mnecodeSql.toString(), totalValues.toArray(new Object[]{}));
			resultList = query.setMaxResults(showNumber).list();
		}
		
		return resultList;
		
	}

	@Override
	public void destroy() throws Exception {
		beforeServiceDestroy();
//		aclPermissionService = null;
		sqlService = null;
//		eventService = null;
		bapCodeGenerator = null;
		scriptService = null;
		documentService = null;
		budgeItemDao = null;
		budgeItemService = null;
		costBudgeDao = null;
		costTypeDao = null;
		costTypeService = null;
		budgetExtDao = null;
		budgetExtService = null;
	
		dataPermissionService = null;
		counterManager = null;
		conditionService = null;
		viewServiceFoundation = null;
		creatorService = null;
		synchronizeInfoService = null;
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		this.counter = this.counterManager.addCounter("costBudget", "SESWssFe_1.0.0_costBudget", "costBudget_{1,date,yyyyMMdd}_{0,number,000}", CounterType.Daily);
		String formatStr = "";
		this.afterInitBean();
	}
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public String getWorkFlowInfo(String menuCode) {
		String sql="select d.PROCESS_KEY PROCESSKEY from WF_DEPLOYMENT d,BASE_MENUINFO m where d.MENU_INFO_ID=m.id and d.valid=1 and m.code=? group by d.PROCESS_KEY";
		NativeQuery query=costBudgeDao.createNativeQuery(sql, menuCode);
		List<String> list=query.list();
		String keys="";
		for(String key:list){
			keys+=","+key;
		}
		if(!"".equals(keys)){
			keys=keys.substring(1);
		}
		
		return keys;
	}
	// ================ 生成多选控件数据保存方法 start====================
	// ================ 生成多选控件数据保存方法 end ====================

	protected String getEntityCode(){return SESWssFeCostBudge.ENTITY_CODE;}
	protected String getModuleCode(){return SESWssFeCostBudge.MODULE_CODE;}
	protected String getModelCode(){return SESWssFeCostBudge.MODEL_CODE;}
	
	@Override
	public List<SESWssFeCostBudge> getTreeChildren(Long parentId, String cond, Object... params) {
		SESWssFeCostBudge parent = costBudgeDao.getTree("costBudge_tree_" + parentId, parentId, new SESWssFeCostBudgePrepareData(cond, params), false);
		if (null != parent && null != parent.getChildren()){
			return parent.getChildren();
		}
		return Collections.emptyList();
	}
	
	@Override
	public List<SESWssFeCostBudge> getTreeInfo(Map<Long, String> treeInfo, String condition, List<Object> params) {
		final String conditionSql = (null != condition && condition.trim().length() > 0) ? " and " + condition : "";
		// key与value转换一下，方便通过layRec取id
		Map<String, Long> newTreeInfo = MapUtils.invertMap(treeInfo);
		// 存放顶层节点layRec
		List<String> mapKeys = new ArrayList<>();
		Map<String, List<String>> mapInfos = new HashMap<>();
		// 把选中的节点归类到各自所属的顶层节点中
		for (Map.Entry<Long, String> info : treeInfo.entrySet()) {
			if (mapKeys.isEmpty() || !info.getValue().startsWith(mapKeys.get(mapKeys.size() - 1) + "-")) {
				mapKeys.add(info.getValue());
				mapInfos.put(info.getValue(), new ArrayList<String>());
				mapInfos.get(mapKeys.get(mapKeys.size() - 1)).add(info.getValue());
			} else {
				mapInfos.get(mapKeys.get(mapKeys.size() - 1)).add(info.getValue());
			}
		}
		List<SESWssFeCostBudge> treeList = new ArrayList<SESWssFeCostBudge>();
		for(String layRec : mapKeys) {
			StringBuffer strBuf = new StringBuffer();
			List<String> partTreeLayRecs = mapInfos.get(layRec);
			final List<Object> paramsList = new ArrayList<Object>();
			for (String partLayRec : partTreeLayRecs) {
				if (strBuf.length() != 0) {
					strBuf.append(" or ");
				}
				boolean existsSubChildrenFlag = false;
				// 判断是否存在下级节点，如有同时选择了父节点与下级节点，只需要把父节点本身返回；如果未选择下级节点，需要拿到当前节点为根的整棵树
				for (String partLayRec1 : partTreeLayRecs) {
					if (partLayRec1.startsWith(partLayRec + "-")) {
						existsSubChildrenFlag = true;
						break;
					}
				}
				if (existsSubChildrenFlag) {
					strBuf.append("id = ?");
					paramsList.add(newTreeInfo.get(partLayRec));
				} else {
					strBuf.append("(layRec like ? or id = ?)");
					paramsList.add(partLayRec + "-%");
					paramsList.add(newTreeInfo.get(partLayRec));
				}
			}
			if (null != condition && condition.trim().length() > 0) {
				paramsList.addAll(params);
			}
			final String rootLayRec = layRec + "-";
			final Long rootId = newTreeInfo.get(layRec);
			final String searchCondition = strBuf.length() == 0 ? " 1=1" : strBuf.toString();
			SESWssFeCostBudge costBudgeTree = costBudgeDao.getTree("SESWssFeCostBudge" + rootLayRec + "-", rootId, new PrepareData<SESWssFeCostBudge, Long>() {
				@Override
				public SESWssFeCostBudge root() {
					SESWssFeCostBudge costBudge = new SESWssFeCostBudge();
					costBudge.setId(-1L);
					return costBudge;
				}

				@Override
				public List<SESWssFeCostBudge> prepare(TreeDao<SESWssFeCostBudge, Long> dao) {
					String hql = "from " + SESWssFeCostBudge.JPA_NAME + " where (" + searchCondition + ") and valid = true " + conditionSql + " order by layRec asc, sort asc";
					return dao.findByHql(hql, paramsList.toArray());
				}
			}, false);
			List<SESWssFeCostBudge> treeChildren = new ArrayList<SESWssFeCostBudge>();
			Tree.treeToList(costBudgeTree, treeChildren, true);
			treeList.addAll(treeChildren);
		}
		return treeList;
	}

	private class SESWssFeCostBudgePrepareData implements PrepareData<SESWssFeCostBudge, Long> {
		private String cond;
		private Object[] params;
		
		public SESWssFeCostBudgePrepareData(String cond, Object... params) {
			this.cond = cond;
			this.params = params;
		}

		//@Override
		//public List<SESWssFeCostBudge> prepare(TreeDao<SESWssFeCostBudge, Long> dao) {
		//	String hql = "from " + SESWssFeCostBudge.JPA_NAME;
		//	if (null != cond && cond.trim().length() > 0) {
		//		hql += " where " + cond;
		//	}
		//	List<SESWssFeCostBudge> list = dao.findByHql(hql);
		//	return list;
		//}
		
		@Override
		public List<SESWssFeCostBudge> prepare(TreeDao<SESWssFeCostBudge, Long> dao) {
			List<SESWssFeCostBudge> list = null;
			List<SESWssFeCostBudge> result = new ArrayList<SESWssFeCostBudge>();
			DetachedCriteria detachedCriteria = DetachedCriteria.forClass(SESWssFeCostBudge.class);
			if(params!=null&&params.length>0){
				List<Type> types = new ArrayList<Type>();
				for(Object obj : params){
					types.add(TypeFactory.basic(obj.getClass().getName()));
				}
				detachedCriteria.add(Restrictions.sqlRestriction(cond, params, types.toArray(new Type[]{})));
				detachedCriteria.addOrder(Order.asc("sort"));
				detachedCriteria.addOrder(Order.asc("id"));
				list = dao.findByCriteria(detachedCriteria);
			}else{
				list = dao.findByHql("from " + SESWssFeCostBudge.JPA_NAME + " " + ((cond==null || cond.isEmpty()) ? "" : "where " + cond + " order by layRec asc, sort asc")) ;
			}
			for(SESWssFeCostBudge m : list){
				result.add(m);
				if(m.getParentId()!=-1){
					while(m.getParentId()!=-1){
						SESWssFeCostBudge parent = dao.get(m.getParentId());
						if(!list.contains(parent)){
							result.add(parent);
						}
						m = parent;
					}
				}
			}
			return result;
		}

		@Override
		public SESWssFeCostBudge root() {
			SESWssFeCostBudge costBudge = new SESWssFeCostBudge();
			costBudge.setId(-1L);
			return costBudge;
		}
	}
	
	/**
	 * 检查模型字段的唯一性约束
	 * @param costBudge 模型实例
	 */
	 @Override
	public void checkUniqueConstraint(SESWssFeCostBudge costBudge){
	}
	
	@Override
	public List<SESWssFeCostBudge> getCostBudges(String sql, List<Object> params) {
		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(SESWssFeCostBudge.class);
		if(params!=null){
			List<Type> types = new ArrayList<Type>();
			for(Object obj : params){
				types.add(TypeFactory.basic(obj.getClass().getName()));
			}
			detachedCriteria.add(Restrictions.sqlRestriction(sql, params.toArray(new Object[]{}),types.toArray(new Type[]{})));
		}else{
			return costBudgeDao.findByHql("from " + SESWssFeCostBudge.JPA_NAME + " " + ((sql==null || sql.isEmpty()) ? "" : "where " + sql)) ;
		}
		return costBudgeDao.findByCriteria(detachedCriteria);
	}
	
	
	
	@Override
	public List<SESWssFeCostBudge> findCostBudgesBySql(String sql, List<Object> params){
		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(SESWssFeCostBudge.class);
		if(params!=null && params.size()>0){
			List<Type> types = new ArrayList<Type>();
			for(Object obj : params){
				types.add(TypeFactory.basic(obj.getClass().getName()));
			}
			detachedCriteria.add(Restrictions.sqlRestriction(sql, params.toArray(new Object[]{}),types.toArray(new Type[]{})));
			
		}else{
			detachedCriteria.add(Restrictions.sqlRestriction(sql));
		}
		
		return costBudgeDao.findByCriteria(detachedCriteria);
	}
	@Override
	public List<SESWssFeCostBudge> findCostBudgesByHql(String hql, Object... objects){
		
		return   costBudgeDao.findByHql(hql, objects);
	}
	
	@Override
	public SESWssFeCostBudge loadCostBudgeByBussinessKey(SESWssFeCostBudge costBudge){
		return loadCostBudgeByBussinessKey(costBudge.getId());
	}
	
	@Override
	public Page<SESWssFeCostBudge> getCostBudges(Page<SESWssFeCostBudge> page, String sql, List<Object> params, String sort) {
		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(SESWssFeCostBudge.class);
		if(sort!=null && sort.length()>0){
			String[] sorts = sort.split("\\|");
			if(sorts!=null && sorts.length>0){
				for(String condition : sorts){
					if(condition!=null && condition.length()>0 && condition.contains(",")){
						String[] conditions = condition.split(",");
						if("asc".equals(conditions[1])){
							detachedCriteria.addOrder(Order.asc(conditions[0]));
						}else if("desc".equals(conditions[1])){
							detachedCriteria.addOrder(Order.desc(conditions[0]));
						}
					}
				}
			}
		}
		if(params!=null){
			List<Type> types = new ArrayList<Type>();
			for(Object obj : params){
				types.add(TypeFactory.basic(obj.getClass().getName()));
			}
			detachedCriteria.add(Restrictions.sqlRestriction(sql, params.toArray(new Object[]{}),types.toArray(new Type[]{})));
		}else{
			if(sql!=null){
				page = costBudgeDao.findByPage(page, sql);
			}else{
				page = costBudgeDao.findAllByPage(page);
			}
			return page;
		}
		page = costBudgeDao.findByPage(page, detachedCriteria);
		return page;
	}
	//==============DataGrid多选控件使用 start================
	
	@Override
	public void dealCostBudgeLeaf(List<Long> costBudgeIds) {
		if (costBudgeIds != null && costBudgeIds.size() > 0) {
			String hql = "update " + SESWssFeCostBudge.JPA_NAME + " as t1 set t1.leaf=1 where id in(:ids) and not exists (select t2.id from "
					+ SESWssFeCostBudge.JPA_NAME + " as t2 where t2.parentId = t1.id)";
			Query query = costBudgeDao.createQuery(hql);
			query.setParameterList("ids", costBudgeIds);
			query.executeUpdate();
		}
	}
	/**
	 * 树拖动节点
	 * @param dragSource
	 * @param dragTarget
	 * @param sort
	 */
	@Override
	public void drag(long dragSource, long dragTarget, long sort){
		SESWssFeCostBudge source = getCostBudge(dragSource);
		SESWssFeCostBudge oldParent = source.getParent();
		
		SESWssFeCostBudge target = null;
		if(dragTarget!=-1){
			target = self.getCostBudge(dragTarget);
		} else {
			target = new SESWssFeCostBudge();
			target.setId(-1L);
		}
		costBudgeDao.move(source, target);
	}
	
	private void dragCostBudge(SESWssFeCostBudge parent, List<SESWssFeCostBudge> children){
		for(SESWssFeCostBudge child : children){
			child.setLayNo(parent.getLayNo()+1);
			child.setLayRec(parent.getLayRec() + "-" + child.getId());
			child.setFullPathName(OrchidUtils.getMainDisplayValue(parent) + "/" + OrchidUtils.getMainDisplayValue(child));
			saveCostBudge(child, null,null,null);
			List<SESWssFeCostBudge> subChildren = getTreeChildren(child.getId(), "");
			if(subChildren!=null && subChildren.size()>0){
				dragCostBudge(child, subChildren);
			}
		}
	}

	@Override
	public List<SESWssFeCostBudge> convertTree(List<SESWssFeCostBudge> costBudges){
		List<SESWssFeCostBudge> trees = new ArrayList<SESWssFeCostBudge>();
		Map<Long, SESWssFeCostBudge> map = new LinkedHashMap<Long, SESWssFeCostBudge>(costBudges.size());
		Map<Long, Boolean> isParent = new HashMap<Long, Boolean>();
		for (SESWssFeCostBudge node : costBudges) {
			map.put(Long.parseLong(node.getId().toString()), node);
		}
		for (SESWssFeCostBudge node : costBudges) {
			if (null == node.getParentId() ||Long.parseLong(node.getParentId().toString()) == -1) {
				trees.add(node);
			} else {
				SESWssFeCostBudge parent = map.get(node.getParentId());
				node.setParent(parent);
				isParent.put(parent.getId(), true);
			}
		}
		for (SESWssFeCostBudge node : costBudges) {
			if(isParent.get(node.getId())!=null && isParent.get(node.getId())){
				node.setIsParent(true);
			}
		}
		return trees;
	}
	
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public SESWssFeCostBudge loadCostBudgeByBussinessKey(Serializable bussinessKey){
		return costBudgeDao.findEntityByCriteria(Restrictions.eq("id", Long.valueOf(bussinessKey.toString())),Restrictions.eq("valid", true));
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public List<SESWssFeCostBudge> findByProperty(String propertyName, Object object){
		return costBudgeDao.findByProperty(propertyName, object);
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public SESWssFeCostBudge findEntityByProperty(String propertyName, Object object){
		return costBudgeDao.findEntityByProperty(propertyName, object);
	}
	
	
	
	@Override
	@Transactional
	public void deleteByBussinessKeys(String bussinessKeys){
		if(null != bussinessKeys && bussinessKeys.trim().length() > 0){
			List<Long> bussinessKeyList = new ArrayList<Long>();
			for(String key : bussinessKeys.split(",")){
				bussinessKeyList.add(Long.valueOf(key));
			}
			String sql = "update " + SESWssFeCostBudge.JPA_NAME + " set valid=0 where id in (:businessKeys)";
			Query query = costBudgeDao.createQuery(sql);
			query.setParameterList("businessKeys", bussinessKeyList);
			query.executeUpdate();
		}
	}
	
	@Override
	public String findValidateDatagrids(Map<String,Class> dgClassMap){
		String bap_validate_datagrids="";
		List<View> dgviews = viewServiceFoundation.findViewsByAssModelCode("SESWssFe_1.0.0_costBudget_CostBudge","runtime");
		try {
			for(View dgv:dgviews){
				if (null == dgv.getIsShadow() || !dgv.getIsShadow()) {
					List<DataGrid> ldg=viewServiceFoundation.getDataGrids(dgv.getCode());
					for(DataGrid dg:ldg){
						bap_validate_datagrids+=dg.getName()+",";
						dgClassMap.put(dg.getName(),Class.forName("com.supcon.orchid.SESWssFe.entities."+dg.getTargetModel().getJpaName()));
					}
				}
			}
		} catch (ClassNotFoundException e) {
			log.error(e.getMessage(),e);
		}
		return bap_validate_datagrids;
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public String findValidateDatagrids(Map<String,Class> dgClassMap,String viewCode){
		String bap_validate_datagrids="";
		List<DataGrid> dgs = viewServiceFoundation.getDataGrids(viewCode, "runtime");
		try {
			for(DataGrid dg:dgs){
				bap_validate_datagrids+=dg.getName()+",";
				dgClassMap.put(dg.getName(),Class.forName("com.supcon.orchid.SESWssFe.entities."+dg.getTargetModel().getJpaName()));
			}
		} catch (ClassNotFoundException e) {
			log.error(e.getMessage(),e);
		}
		return bap_validate_datagrids;
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public String findMainViewPath(){
		String mainViewPath="";
		List<View> views = viewServiceFoundation.findViewsByEntityCode("SESWssFe_1.0.0_costBudget", ViewType.VIEW);
		for(View v:views){
			if(v.getMainView()){
				mainViewPath=v.getUrl();
			}
		}
		return mainViewPath;
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public List<DataGrid> findDatagrids(){
		List<DataGrid> ldg=new ArrayList<DataGrid>();
		List<View> dgviews = viewServiceFoundation.findViewsByAssModelCode("SESWssFe_1.0.0_costBudget_CostBudge","runtime");
		for(View dgv:dgviews){
			if (null == dgv.getIsShadow() || !dgv.getIsShadow()) {
				ldg.addAll(dgv.getDataGrids());
			}
		}
		return ldg;
	}

	@Override
	public void dealDatagridsSave(SESWssFeCostBudge costBudge,String viewCode,Map<String,String> dgLists,Map<String,String> dgDeleteIDs,Map<String,Object> assFileUploads){
		if(dgLists==null&&dgDeleteIDs==null){
			return;
		}
		List<DataGrid> dgs=viewServiceFoundation.getDataGrids(viewCode, "runtime");
		if(dgs!=null&&dgs.size()>0){
			costBudgeDao.flush();
			Class _reflect_thisclass=this.getClass();
			try {
				for(DataGrid dg:dgs){
					if(null != dg.getDataGridType() && dg.getDataGridType() == 1){
						continue;
					}
					Class _reflect_dgclass=Class.forName("com.supcon.orchid.SESWssFe.entities."+dg.getTargetModel().getJpaName());
					java.lang.reflect.Field _reflect_serviceField = _reflect_thisclass.getDeclaredField(fLTL(dg.getTargetModel().getModelName())+"Service");
					Class _reflect_serviceType=_reflect_serviceField.getType();
					Object _reflect_serviceObj=_reflect_serviceField.get(this);
					Model _targetModel=dg.getTargetModel();
					List<Long> _needDealIds = new ArrayList<>();
					Map<String, Long> _dgCodeMap = new HashMap<String, Long>();
					boolean isTree=(_targetModel.getDataType()==2);
					List<String> _attachKey =new ArrayList<String>();
					Map _confMap=dg.getConfigMap();
					Map _layoutMap = (Map) _confMap.get("layout");
					List<Map> ls = (List<Map>) _layoutMap.get("sections");
					for(Map lm:ls){
						if(lm.get("regionType").equals("DATAGRID")){
							List<Map> lc = (List<Map>) lm.get("cells");
							for(Map lk:lc){
								if("PROPERTYATTACHMENT".equals(lk.get("columnType"))&&lk.get("key")!=null){
									_attachKey.add(lk.get("key").toString());
								}
							}
						}
					}
					boolean hasAttach=(_attachKey.size()>0);
					if(null == assFileUploads){
						assFileUploads = new HashMap<String,Object>();
					}
					if(hasAttach&&assFileUploads.get("staffId")==null){	
						assFileUploads.put("staffId", ((OrchidAuthenticationToken)SecurityContextHolder.getContext().getAuthentication()).getStaff().getId());
					}
					Map<String,Object> dgAttachMap = (Map<String, Object>) assFileUploads.get(dg.getName());
					if(hasAttach){
						if(null == dgAttachMap){
							dgAttachMap = new HashMap<String,Object>();
						}
						for(String key:_attachKey){
							dgAttachMap.put(key+"_propertyCode",_reflect_dgclass.getDeclaredField(key.toUpperCase()+"_PROPERTY_CODE").get(null));
						}
						dgAttachMap.put("type", _reflect_dgclass.getDeclaredField("DOC_TYPE").get(null));
					}
					if(dgDeleteIDs!=null&&dgDeleteIDs.get(dg.getName())!=null){
						ArrayList<Long> param=new ArrayList<Long>();
						String[] arrs=dgDeleteIDs.get(dg.getName()).split(",");
						for(int i=0;i<arrs.length;i++){
							param.add(Long.valueOf(arrs[i]));
						}
						if(hasAttach){
							dgAttachMap.put("deleteIds",param);
						}
						_reflect_serviceType.getDeclaredMethod("delete"+_targetModel.getModelName(),List.class,String.class).invoke(_reflect_serviceObj,param,"noEvent");
					}
					if(dgLists!=null&&dgLists.get(dg.getName())!=null){
						if(isTree){
							_needDealIds.clear();
							_dgCodeMap.clear();
						}
						List dglist=(List)com.supcon.orchid.ec.utils.JSONUtil.generateObjectFromJson(dgLists.get(dg.getName()).replaceAll("\r\n", "\\\\r\\\\n"), _reflect_dgclass,costBudgeDao.getSessionFactory());
						Method _reflect_setMethod=_reflect_dgclass.getMethod("set"+fLTU(dg.getOrgProperty().getName()), SESWssFeCostBudge.class);
						Method _reflect_saveMethod=_reflect_serviceType.getMethod("save"+_targetModel.getModelName(),_reflect_dgclass,Map.class,Map.class,Map.class,String.class,String.class,boolean[].class);
						for(Object odg:dglist){
							_reflect_setMethod.invoke(odg, costBudge);
							Map<String,Object> paramMap = new HashMap<String,Object>();
							if(hasAttach){
								for(String key:_attachKey){
									String fileAddPath=(String)_reflect_dgclass.getDeclaredMethod("get"+fLTU(key)+"FileAddPaths", null).invoke(odg, null);
									if(fileAddPath!=null&&fileAddPath.length()>0){
										paramMap.put(key+"_fileAddPaths",fileAddPath);
									}
									String fileDeleteIds=(String)_reflect_dgclass.getDeclaredMethod("get"+fLTU(key)+"FileDeleteIds", null).invoke(odg, null);
									if(fileDeleteIds!=null&&fileDeleteIds.length()>0){
										paramMap.put(key+"_fileDeleteIds",fileDeleteIds);
									}
								}
							}
							if(isTree){
								String ppCode = ((com.supcon.orchid.tree.AbstractCidTreeNode)odg).getVirtualParentCode();
								if(null != ppCode && ppCode.indexOf("x") > -1) {
									if(_dgCodeMap.containsKey(ppCode)) {
										((com.supcon.orchid.tree.AbstractCidTreeNode)odg).setParentId(_dgCodeMap.get(ppCode));
									}
								} else if(null != ppCode && !ppCode.isEmpty()) {
									((com.supcon.orchid.tree.AbstractCidTreeNode)odg).setParentId(Long.parseLong(ppCode));
								}
							}
							_reflect_saveMethod.invoke(_reflect_serviceObj, odg,null,null,null,viewCode,"noEvent",new boolean[]{});
							if(isTree){
								_needDealIds.add(((com.supcon.orchid.tree.AbstractCidTreeNode)odg).getId());
								String pCode = ((com.supcon.orchid.tree.AbstractCidTreeNode)odg).getVirtualCode();
								if(!_dgCodeMap.containsKey(pCode)) {
									_dgCodeMap.put(pCode, ((com.supcon.orchid.tree.AbstractCidTreeNode)odg).getId());
								}
							}
							if(!paramMap.isEmpty()){
								paramMap.put("linkId",((com.supcon.orchid.orm.entities.IdEntity)odg).getId());
								paramMap.put("mainModelId",costBudge.getId());	
								dgAttachMap.put(((com.supcon.orchid.orm.entities.IdEntity)odg).getId().toString(), paramMap);
							}
						}
						if(isTree){
							_reflect_serviceType.getMethod("deal"+_targetModel.getModelName()+"Leaf",List.class).invoke(_reflect_serviceObj, _needDealIds);
						}
					}
					if(hasAttach){
						if(null != dgAttachMap && !dgAttachMap.isEmpty()){
							assFileUploads.put(dg.getName(),dgAttachMap);
						}
					}
				}
			}catch (Exception e) {
				log.error(e.getMessage(),e);
				if(e instanceof InvocationTargetException){
					InvocationTargetException iteException=(InvocationTargetException)e;
					if(iteException.getTargetException()!=null){
						Throwable throwable=iteException.getTargetException();
						if(throwable instanceof BAPException){
					     	 throw (BAPException)throwable;
					    }else{
							throw new BAPException(throwable.getMessage()!=null?throwable.getMessage():InternationalResource.get("foundation.error.message", getCurrentLanguage()));
						}
					}
				}
				throw new BAPException(InternationalResource.get("foundation.error.message", getCurrentLanguage()));
			}
		}
	} 

	
		@Override
	@Transactional
	public List<Object> getBusinessKeyData(String businessKeyName){
		List<Object> list = new ArrayList<Object>();
		if(null != businessKeyName){
			String sql = "select " + businessKeyName +" from "+ SESWssFeCostBudge.TABLE_NAME +" where valid = 1";
			list = costBudgeDao.createNativeQuery(sql).list();
		}
		return list;
	}
	
	@Override
	@Transactional
	public List<Object> getBusinessKeyDataByBusinessKeyName(String businessKeyName){
		List<Object> list = new ArrayList<Object>();
		if(null != businessKeyName){
			String sql = "select " + businessKeyName +" from "+ SESWssFeCostBudge.TABLE_NAME;
			list = costBudgeDao.createNativeQuery(sql).list();
		}
		return list;
	}
	
	@Override
	@Transactional
	public Map<Object, Object> getReplaceProperty(String propertyName,String businessKey){
		List<Object[]> list = new ArrayList<Object[]>();
		Map<Object, Object> m = new HashMap<Object, Object>();
		if(null != propertyName && null != businessKey){
			String sql = "select " + businessKey + "," + propertyName +" from "+ SESWssFeCostBudge.TABLE_NAME +" group by " + propertyName + "," + businessKey;
			list = costBudgeDao.createNativeQuery(sql).list();
		}
		if (list != null && !list.isEmpty()) {
			for (Object[] obj : list) {
				if(null != obj[1]){
					m.put(obj[0], obj[1]);
				}
			}
		}
		return m;
	}
	
	@Autowired
	private SESWssFeCostBudgeDaoImpl costBudgeDaoImpl;
	
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.import.bussiness.info",operType="5")
	public Map<Object, Long> importBatchCostBudge(final List<SESWssFeCostBudge> insertObjs, final List<SESWssFeCostBudge> updateObjs, 
				List<Map<String,String>> columnInfo, Map<String ,List<Map<String, Object>>> importNodeInfo, Map<String, Property> importPropInfo){
		return self.importBatchCostBudge(insertObjs, updateObjs, columnInfo, importNodeInfo, importPropInfo,null);
	}
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.import.bussiness.info",operType="5")
	public Map<Object, Long> importBatchCostBudge(final List<SESWssFeCostBudge> insertObjs, final List<SESWssFeCostBudge> updateObjs, 
				List<Map<String,String>> columnInfo, Map<String ,List<Map<String, Object>>> importNodeInfo, Map<String, Property> importPropInfo,SignatureLog signatureLog){
				
		int importCount = 0;
		if (null != insertObjs) {
			importCount += insertObjs.size();
		}
		if (null != updateObjs) {
			importCount += updateObjs.size();
		}
		AuditUtil.setAuditDes(InternationalResource.get("foundation.import.bussiness.info.args",null,InternationalResource.get("SESWssFe.costBudget.CostBudget"),importCount));
		if(null != signatureLog && null == signatureLog.getOperateLogUuid()){
			if (null != AuditUtil.getCurrentAudit() && null != AuditUtil.getCurrentAudit().getOperationAudit()) {
				signatureLog.setOperateLogUuid((null == AuditUtil.getCurrentAudit().getOperationAudit().get_parentCode() || "-1".equals( AuditUtil
						.getCurrentAudit().getOperationAudit().get_parentCode())) ? AuditUtil.getCurrentAudit().getOperationAudit().getUuid() : AuditUtil
						.getCurrentAudit().getOperationAudit().get_parentCode());
			}
		}
		Map<Long, SESWssFeCostBudge> oldUpdateObjsMap = new HashMap<Long, SESWssFeCostBudge>(); 
		List<Long> updateObjIdsList = new ArrayList<Long>();
		for(int updateIndex = 0; updateIndex < updateObjs.size(); updateIndex++)  {
			SESWssFeCostBudge bizObj = updateObjs.get(updateIndex);
			updateObjIdsList.add(bizObj.getId());
		}
		if (updateObjIdsList.size() > 0) {
			DetachedCriteria detachedCriteria = DetachedCriteria.forClass(SESWssFeCostBudge.class);
			if(updateObjIdsList.size()>1000){
				List<Long> updateObjIdsListBefore = updateObjIdsList.subList(0, 999);
				List<Long> updateObjIdsListAfter = updateObjIdsList.subList(999, updateObjIdsList.size());		
				detachedCriteria.add(Restrictions.or(Restrictions.in("id", updateObjIdsListBefore),Restrictions.in("id", updateObjIdsListAfter)));
			}else{
				detachedCriteria.add(Restrictions.in("id", updateObjIdsList));
			}
			List<SESWssFeCostBudge> bizObjList = costBudgeDao.findByCriteria(detachedCriteria);
			if (null != bizObjList) {
				for (int mIndex = 0; mIndex < bizObjList.size(); mIndex++) {
					SESWssFeCostBudge bizObj = bizObjList.get(mIndex);
					if (null != bizObj && null != bizObj.getId()) {
						oldUpdateObjsMap.put(bizObj.getId(), bizObj);
					}
				}
			}
		}		
				
		final List<Map<String,String>> columnMaps = new ArrayList<Map<String,String>>();
		List<String> columnName = new ArrayList<String>();
		final List<String> associatedModelNames = new ArrayList<String>();
		final List<String> associatedModelTypes = new ArrayList<String>();
		for(int i = 0 ; i<columnInfo.size(); i++){//封装excel中列名对应的模型中的字段，数据库中的字段，字段类型
			if(!columnName.contains(columnInfo.get(i).get("name")) && !columnInfo.get(i).get("name").equals("id")){
				Map<String,String> columnMap = new HashMap<String, String>();
				columnMap.put("name", columnInfo.get(i).get("name"));
				String name = columnInfo.get(i).get("name");
				if(name.equals("deleteStaff") || name.equals("createStaff") || name.equals("modifyStaff") || name.equals("effectStaff") || name.equals("ownerDepartment") || 
						name.equals("ownerPosition") || name.equals("createPosition") || name.equals("createDepartment") || name.equals("ownerStaff")){
					name = name + "Id";
				}
				columnMap.put("dbname", columnInfo.get(i).get("dbname"));
				columnMap.put("type", columnInfo.get(i).get("type"));
				columnMap.put("isCustom", columnInfo.get(i).get("isCustom"));
				columnMap.put("multable", columnInfo.get(i).get("multable"));
				columnMaps.add(columnMap);
				columnName.add(columnInfo.get(i).get("name"));
				associatedModelNames.add(columnInfo.get(i).get("associatedModelName"));
				associatedModelTypes.add(columnInfo.get(i).get("associatedModelType"));
			}
		}
		
		final List<SESWssFeCostBudge> nmeObjs = new ArrayList<SESWssFeCostBudge>();
		
		Map<Object, Long> m = new HashMap<Object, Long>();
		
		final String dbId = getDbIdName();
		final List<Long> insertIds = new ArrayList<Long>();
		int expLength=insertObjs.size();
		long id=autoGeneratorID.getNextId(SESWssFeCostBudge.TABLE_NAME,expLength,dbId);//id表只操作一次，实际id通过++来增长
		for(SESWssFeCostBudge costBudge:insertObjs)  {
			//id = autoGeneratorID.getNextId(SESWssFeCostBudge.TABLE_NAME,1,dbId);
			if(costBudge.getId() != null ){
				m.put(costBudge.getId(), id);
			}else{
				m.put(id, id);
			}
			insertIds.add(id);
			costBudge.setId(id);
			id++;
		}
		
		//节点处理
		List<Map<String, Object>> updateNodeList = importNodeInfo.get("update");
		List<Map<String, Object>> insertNodeList = importNodeInfo.get("insert");
		Property mainDisplayProp = importPropInfo.get("mainDisplay");
		Property businessKeyProp = importPropInfo.get("businessKey");
		
		String mainDisName = null;
		if(updateNodeList!=null && updateNodeList.size()>0){
			mainDisName = (String) updateNodeList.get(0).get("mainDisplayName");
		}else{
			mainDisName = (String) insertNodeList.get(0).get("mainDisplayName");
		}
		String getMainDisMethodName = "get" + mainDisName.substring(0, 1).toUpperCase() + mainDisName.substring(1);
		Method getMainDis =null;
		try {
			if(updateObjs!=null && updateObjs.size()>0){
				getMainDis = updateObjs.get(0).getClass().getMethod(getMainDisMethodName);
			}else{
				getMainDis = insertObjs.get(0).getClass().getMethod(getMainDisMethodName);
			}
		} catch (NoSuchMethodException | SecurityException e) {
			log.error(e.getMessage(),e);
		}
		
		String busKeyName = null;
		if(updateNodeList!=null && updateNodeList.size()>0){
			busKeyName = (String) updateNodeList.get(0).get("businessKeyName");
		}else{
			busKeyName = (String) insertNodeList.get(0).get("businessKeyName");
		}
		String getBusKeyMethodName = "get" + busKeyName.substring(0, 1).toUpperCase() + busKeyName.substring(1);
		Method getBusKey =null;
		try {
			if(updateObjs!=null && updateObjs.size()>0){
				getBusKey = updateObjs.get(0).getClass().getMethod(getBusKeyMethodName);
			}else{
				getBusKey = insertObjs.get(0).getClass().getMethod(getBusKeyMethodName);
			}
		} catch (NoSuchMethodException | SecurityException e) {
			log.error(e.getMessage(),e);
		}
		
		this.insertBuildedObj = new HashMap<String, Object>();
		this.insertBuildedObjCount = 0;
		Map<String, Object> insertParentNode = new HashMap<String, Object>();
		List<Map<String, Object>> needChangeInsertNodeList = new ArrayList<Map<String,Object>>();
		List<SESWssFeCostBudge> needChangeInsertObjList = new ArrayList<SESWssFeCostBudge>();
		if(insertNodeList != null && insertNodeList.size()>0 ){
			for(int i = 0; i < insertNodeList.size(); i++){
				Map<String, Object> insertNode = insertNodeList.get(i);
				Boolean needChange = false;
				Boolean isRoot = false;
				if(insertNode.get("needChange")!=null){
					needChange = (Boolean) insertNode.get("needChange");	
					if(needChange){
						needChangeInsertNodeList.add(insertNode);
						needChangeInsertObjList.add(insertObjs.get(i));
					}
				}else if(insertNode.get("isRoot")!=null){
					isRoot = (Boolean) insertNode.get("isRoot");	
					if(isRoot){
						needChangeInsertNodeList.add(insertNode);
						needChangeInsertObjList.add(insertObjs.get(i));
					}
				}	
				if(!needChange && !isRoot){
					SESWssFeCostBudge obj = insertObjs.get(i);
					String virtualId = null;
					String mainDis = null;
					String busKey = null;
					try {
						if(null != getMainDis.invoke(obj)){
							mainDis = getMainDis.invoke(obj).toString();
						}
						if(null != getBusKey.invoke(obj)){
							busKey = getBusKey.invoke(obj).toString();
						}
						Method virtualMethod = obj.getClass().getMethod("getVirtualId");
						virtualId = (String) virtualMethod.invoke(obj);
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) {
						log.error(e.getMessage(),e);
					}
					/*String parentNode = insertNode.get("parentNode").toString();
					SESWssFeCostBudge parentObj = (SESWssFeCostBudge) insertNode.get(parentNode);
					*/
					Object[] parentNode = (Object[]) insertNode.get("parentNode");//0.主显示；1.id；2.业务主；3.fullPathName;4.layNo;5.layRec;6.parentId;7.leaf
					String layRec = parentNode[5] + "-" + obj.getId().toString();
					obj.setParentId(Long.valueOf(parentNode[1].toString()));
					obj.setLayNo(Integer.valueOf(parentNode[4].toString())+1);
					obj.setLayRec(layRec);
					obj.setFullPathName(parentNode[3].toString() + "/" + mainDis);
					if(virtualId != null && virtualId.length() > 0){
						insertBuildedObj.put(virtualId, obj);
					}else{
						insertBuildedObj.put(busKey, obj);
					}
					insertBuildedObj.put(mainDis, obj);
				}
			}	
			insertParentNode = buildInsertObjNode(needChangeInsertNodeList, needChangeInsertObjList,getMainDis, getBusKey);//首先处理新增对象的对象,完善节点信息
		}
		
		final List<Long> updateParentIdList = new ArrayList<Long>();
		final List<Integer> updateLayNoList = new ArrayList<Integer>();
		final List<String> updateLayRecList = new ArrayList<String>();
		final List<String> updateFullPathNameList = new ArrayList<String>();
		if(updateNodeList != null && updateNodeList.size()>0){
			for(int i = 0; i < updateNodeList.size(); i++){
				Map<String, Object> updateNode = updateNodeList.get(i);
				SESWssFeCostBudge updateObj = updateObjs.get(i);
				Boolean isRoot = (Boolean) updateNode.get("isRoot");
				
				if(isRoot){
					updateParentIdList.add(new Long(-1));
					updateLayNoList.add(1);
					updateLayRecList.add(updateObj.getId().toString());
					String mainDis =null;
					try {
						if(null != getMainDis.invoke(updateObj)){
							mainDis = getMainDis.invoke(updateObj).toString();
						}
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						log.error(e.getMessage(),e);
					}
					updateFullPathNameList.add(mainDis);
				}else{
					Boolean needChange = (Boolean) updateNode.get("needChange");					
					String mainDis =null;
					try {
						if(null != getMainDis.invoke(updateObj)){
							mainDis = getMainDis.invoke(updateObj).toString();
						}
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						log.error(e.getMessage(),e);
					}
					if(needChange!=null && !needChange){
						Object[] parentNode = (Object[]) updateNode.get("parentNode");//0.主显示；1.id；2.业务主；3.fullPathName;4.layNo;5.layRec;6.parentId;7.leaf
						String layRec = parentNode[5] + "-" + updateObj.getId().toString();
						updateParentIdList.add(Long.valueOf(parentNode[1].toString()));
						updateLayNoList.add(Integer.valueOf(parentNode[4].toString())+1);
						updateLayRecList.add(layRec);
						updateFullPathNameList.add(parentNode[3].toString() + "/" + mainDis);
					}else{
						String parentNodeKey = (String) updateNode.get("parentNode");
						SESWssFeCostBudge parentNode = (SESWssFeCostBudge) insertParentNode.get(parentNodeKey);
						updateParentIdList.add(parentNode.getId());
						updateLayNoList.add(parentNode.getLayNo()+1);
						updateLayRecList.add(parentNode.getLayRec() + "-" + updateObj.getId().toString());
						updateFullPathNameList.add(parentNode.getFullPathName() + "/" + mainDis);
					}
				}
			}
		}
		final List<Long> insertParentIdList = new ArrayList<Long>();
		final List<Integer> insertLayNoList = new ArrayList<Integer>();
		final List<String> insertLayRecList = new ArrayList<String>();
		final List<String> insertFullPathNameList = new ArrayList<String>();
		if(insertNodeList != null && insertNodeList.size()>0){
			for(int i = 0; i < insertNodeList.size(); i++){
				Map<String, Object> insertNode = insertNodeList.get(i);
				SESWssFeCostBudge insertObj = insertObjs.get(i);
				Boolean isRoot = (Boolean) insertNode.get("isRoot");
				if(isRoot){
					insertParentIdList.add(new Long(-1));
					insertLayNoList.add(1);
					insertLayRecList.add(insertObj.getId().toString());
					String mainDis =null;
					try {
						if(null != getMainDis.invoke(insertObj)){
							mainDis = getMainDis.invoke(insertObj).toString();
						}
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						log.error(e.getMessage(),e);
					}
					insertFullPathNameList.add(mainDis);
				}else{
					Boolean needChange = (Boolean) insertNode.get("needChange");					
					String mainDis =null;
					try {
						if(null != getMainDis.invoke(insertObj)){
							mainDis = getMainDis.invoke(insertObj).toString();
						}
					} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						log.error(e.getMessage(),e);
					}
					if(needChange!=null && !needChange){
						Object[] parentNode = (Object[]) insertNode.get("parentNode");//0.主显示；1.id；2.业务主；3.fullPathName;4.layNo;5.layRec;6.parentId;7.leaf
						String layRec = parentNode[5] + "-" + insertObj.getId().toString();
						insertParentIdList.add(Long.valueOf(parentNode[1].toString()));
						insertLayNoList.add(Integer.valueOf(parentNode[4].toString())+1);
						insertLayRecList.add(layRec);
						insertFullPathNameList.add(parentNode[3].toString() + "/" + mainDis);
					}else{
						String parentNodeKey = (String) insertNode.get("parentNode");
						SESWssFeCostBudge parentNode = (SESWssFeCostBudge) insertParentNode.get(parentNodeKey);
						insertParentIdList.add(parentNode.getId());
						insertLayNoList.add(parentNode.getLayNo()+1);
						insertLayRecList.add(parentNode.getLayRec() + "-" + insertObj.getId().toString());
						insertFullPathNameList.add(parentNode.getFullPathName() + "/" + mainDis);
					}	
				}
			}
		}
		
		List paramList = new ArrayList();
		if(updateObjs != null && updateObjs.size()>0 ){
			for(SESWssFeCostBudge obj : updateObjs){
				Object bus;
				try {
					bus = getBusKey.invoke(obj);
					paramList.add(bus);
				} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
					log.error(e.getMessage(),e);
				}
			}
		}
		
		//节点fullPathName单独处理
		Property businessKey = importPropInfo.get("businessKey");
		Property mainDisplay = importPropInfo.get("mainDisplay");
		List<Long> needChangeFullPathNameId = new ArrayList<Long>();
		//List<Map<Object, Object>> needChangeFullPathNameList = new ArrayList<Map<Object, Object>>();
		Map<Object, Object> needChangeFullPathName = new HashMap<Object, Object>();//原主显示，现主显示
		//先查出来表中主显示字段的值，如果和修改的对象不一致，存在map里。后面用来重刷fullpathname
		if(businessKey != null && mainDisplay != null && businessKey != mainDisplay  && paramList != null && paramList.size()>0){
			String hql = "select " + businessKey.getName() + "," + mainDisplay.getName() + ",id from " + SESWssFeCostBudge.JPA_NAME + " where " + businessKey.getName() + " in (:codes)";
			Query query =  costBudgeDao.createQuery(hql);
			query.setParameterList("codes", paramList);
			List<Object[]> list = query.list();
			if(list.size() == updateObjs.size()){
				for(int i = 0 ; i < updateObjs.size();i++ ){
					SESWssFeCostBudge obj = updateObjs.get(i);
					for(int j = 0 ; j < list.size();j++){
						Object[] listobj = list.get(j);
						try {
							Object md = getMainDis.invoke(obj);
							Object bus = getBusKey.invoke(obj);
							if(bus.toString().equals(listobj[0].toString()) && !md.toString().equals(listobj[1].toString())){
								needChangeFullPathName.put(listobj[1].toString(), md);
								needChangeFullPathNameId.add(Long.valueOf(listobj[2].toString()));
								//needChangeFullPathNameList.add(needChangeFullPathName);
							}
						} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
							log.error(e.getMessage(),e);
						}
					}
				}
			}
		}
		
		for(Map<String,String> map : columnMaps){
			if(map.get("type").equals("SYSTEMCODE")){
				String sql = "select senior_system_code,multable from runtime_property where code = ?";
				Object[] result = (Object[]) costBudgeDao.createNativeQuery(sql, "SESWssFe_1.0.0_costBudget_CostBudge"+"_"+map.get("name")).uniqueResult();
				map.put("isSenior", result[0].toString());
				//map.put("multable", result[1].toString());
			}
		}
		
		costBudgeDaoImpl.getSession().doWork(new Work() {
			@Override
			public void execute(Connection conn) throws SQLException {
				PreparedStatement updateps = null;
				PreparedStatement insertps = null;
				User currentUser=(User)getCurrentUser();
				Staff currentStaff=currentUser.getStaff();
				
				if(updateObjs != null && updateObjs.size()>0){
					List<String> updateMethods = new ArrayList<String>();
					String updateSql = "UPDATE " + SESWssFeCostBudge.TABLE_NAME + " SET ";
					for(int i = 0;i<columnMaps.size();i++){
						String mName = columnMaps.get(i).get("name");
						String methodName = "get"+ mName.replaceFirst(mName.substring(0, 1), mName.substring(0, 1).toUpperCase());
						updateMethods.add(methodName);
						updateSql += columnMaps.get(i).get("dbname")+"=?,";
					}
					updateSql += "parent_id = ?, LAY_NO = ?, LAY_REC = ?, FULL_PATH_NAME = ?";
					updateSql += " where " + dbId + " =?";
					
					updateps = conn.prepareStatement(updateSql);
					for(int updateIndex =0;updateIndex<updateObjs.size();updateIndex++){
						SESWssFeCostBudge costBudge = updateObjs.get(updateIndex);
						Long id = costBudge.getId();
						if(null != id){
							updateps.setLong(columnMaps.size()+5,id);
							updateps.setLong(columnMaps.size()+1,updateParentIdList.get(updateIndex));
							updateps.setInt(columnMaps.size()+2,updateLayNoList.get(updateIndex));
							updateps.setString(columnMaps.size()+3,updateLayRecList.get(updateIndex));
							updateps.setString(columnMaps.size()+4,updateFullPathNameList.get(updateIndex));
							for(int i=0;i<columnMaps.size();i++){
								Method method = null;
								try {
									method = costBudge.getClass().getMethod(updateMethods.get(i));
								} catch (NoSuchMethodException | SecurityException e) {
									log.error(e.getMessage(),e);
								}
								Object obj = null;
								if(null != method){
									try {
										obj = method.invoke(costBudge);
									} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
										log.error(e.getMessage(),e);
									}
								}
								if(null != obj){
									String type = columnMaps.get(i).get("type");
									if (type.equals("TEXT") || type.equals("PASSWORD") || type.equals("LONGTEXT") || type.equals("BAPCODE") || type.equals("SUMMARY")) {
										updateps.setString(i+1, obj.toString());
									} else if(type.equals("SYSTEMCODE")){
										if( null != columnMaps.get(i).get("isCustom") && columnMaps.get(i).get("isCustom").equals("true") ){
											updateps.setString(i+1, obj.toString());
										}else if( null != columnMaps.get(i).get("multable") && columnMaps.get(i).get("multable").equals("true") ){
											updateps.setString(i+1, obj.toString());
										}else if(null != columnMaps.get(i).get("isSenior") && columnMaps.get(i).get("isSenior").equals("0")){
											SystemCode sc = (SystemCode) obj;
											updateps.setString(i+1, sc.getId());
										}else{
											if(obj.toString().contains("SystemCode")){
												SystemCode sc = (SystemCode) obj;
												updateps.setString(i+1, sc.getId());
											}else{
												updateps.setString(i+1, obj.toString());
											}
										}
									} else if ("DATE".equals(type)) {
										java.sql.Date sqlDate=new java.sql.Date(((Date) obj).getTime());
										updateps.setDate(i+1, sqlDate);
									} else if ("DATETIME".equals(type)) {
										java.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(((Date) obj).getTime());
										updateps.setTimestamp(i+1, sqlTimestamp);
									} else if ("INTEGER".equals(type)) {
										updateps.setInt(i+1, (Integer) obj);
									} else if ("LONG".equals(type)) {
										updateps.setLong(i+1, (Long) obj);
									} else if ("DECIMAL".equals(type) || "MONEY".equals(type)) {
										updateps.setBigDecimal(i+1, (BigDecimal) obj);
									} else if ("BOOLEAN".equals(type)) {
										updateps.setBoolean(i+1 , (Boolean) obj);
									} else if ("OBJECT".equals(type)) {
										if(null != columnMaps.get(i).get("isCustom") && columnMaps.get(i).get("isCustom").equals("true")){
											updateps.setLong(i+1, (Long) obj);
										}else{
											Method objmethod = null;
											try {
												String methodName = "get" + associatedModelNames.get(i).substring(0, 1).toUpperCase() +  associatedModelNames.get(i).substring(1, associatedModelNames.get(i).length());
												objmethod = obj.getClass().getMethod(methodName);
												if(associatedModelTypes.get(i).equals("LONG")){
													Long objId = null;
													objId = (Long) objmethod.invoke(obj);
													updateps.setObject(i+1, objId);
												}else if(associatedModelTypes.get(i).equals("TEXT")){
													String objCode = null;
													objCode = (String) objmethod.invoke(obj);
													updateps.setObject(i+1, objCode);
												}
											} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
												log.error(e.getMessage(),e);
											}	
											
										}							}
								}else{
									updateps.setString(i+1, null);
								}
							}
							nmeObjs.add(costBudge);
							updateps.addBatch();
						}
					}	
				}
				
				if(insertObjs != null && insertObjs.size()>0){//新增
					List<String> insertMethods = new ArrayList<String>();
					String insertSql = "INSERT INTO " + SESWssFeCostBudge.TABLE_NAME + " (";
					for(int i = 0;i<columnMaps.size();i++){
						String mName = columnMaps.get(i).get("name");
						String methodName = "get"+ mName.replaceFirst(mName.substring(0, 1), mName.substring(0, 1).toUpperCase());
						insertMethods.add(methodName);
						insertSql += columnMaps.get(i).get("dbname")+",";
					}
					insertSql += dbId + ",CID,CREATE_STAFF_ID,CREATE_TIME,EFFECTIVE_STATE,PARENT_ID,LAY_NO,LAY_REC,FULL_PATH_NAME) VALUES (";
					for(int i = 0;i<columnMaps.size();i++){
						insertSql += "?,";
					}
					insertSql += "?,?,?,?,?,?,?,?,?)";
					
//					String idSql = "select id from " + SESWssFeCostBudge.TABLE_NAME + " order by id desc";
//					Query query = costBudgeDao.createNativeQuery(idSql).setMaxResults(1);
//					Long id = new Long(1000);
//					if(null != query.uniqueResult()){
//						id = Long.valueOf(query.uniqueResult().toString());
//					}
					insertps = conn.prepareStatement(insertSql);
					for(int insertIndex = 0; insertIndex<insertObjs.size(); insertIndex++)  {
						SESWssFeCostBudge costBudge = insertObjs.get(insertIndex);
						insertps.setLong(columnMaps.size() + 1, insertIds.get(insertIndex));
						insertps.setLong(columnMaps.size() + 2,getCurrentCompanyId());
						insertps.setLong(columnMaps.size() + 3,currentStaff.getId());
						java.util.Date date=new java.util.Date();
						insertps.setTimestamp(columnMaps.size() + 4,new java.sql.Timestamp(date.getTime()));
						insertps.setInt(columnMaps.size() + 5,0);
						insertps.setLong(columnMaps.size() + 6,insertParentIdList.get(insertIndex));
						insertps.setInt(columnMaps.size() + 7,insertLayNoList.get(insertIndex));
						insertps.setString(columnMaps.size() + 8,insertLayRecList.get(insertIndex));
						insertps.setString(columnMaps.size() + 9,insertFullPathNameList.get(insertIndex));
						for (int i = 0; i < columnMaps.size(); i++) {
							Method method = null;
							try {
								method = costBudge.getClass().getMethod(
										insertMethods.get(i));
							} catch (NoSuchMethodException | SecurityException e) {
								log.error(e.getMessage(),e);
							}
							Object obj = null;
							if (null != method) {
								try {
									obj = method.invoke(costBudge);
								} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
									log.error(e.getMessage(),e);
								}
							}
							if (null != obj) {
								String type = columnMaps.get(i).get("type");
								if (type.equals("TEXT") || type.equals("PASSWORD") || type.equals("LONGTEXT") || type.equals("BAPCODE") || type.equals("SUMMARY")) {
									insertps.setString(i+1, obj.toString());
								} else if(type.equals("SYSTEMCODE")){
									if( null != columnMaps.get(i).get("isCustom") && columnMaps.get(i).get("isCustom").equals("true") ){
										insertps.setString(i+1, obj.toString());
									}else if( null != columnMaps.get(i).get("multable") && columnMaps.get(i).get("multable").equals("true") ){
										insertps.setString(i+1, obj.toString());
									}else if(null != columnMaps.get(i).get("isSenior") && columnMaps.get(i).get("isSenior").equals("0")){
										SystemCode sc = (SystemCode) obj;
										insertps.setString(i+1, sc.getId());
									}else{
										if(obj.toString().contains("SystemCode")){
											SystemCode sc = (SystemCode) obj;
											insertps.setString(i+1, sc.getId());
										}else{
											insertps.setString(i+1, obj.toString());
										}
									}
								} else if ("DATE".equals(type)) {
									java.sql.Date sqlDate=new java.sql.Date(((Date) obj).getTime());
									insertps.setDate(i+1, sqlDate);
								} else if ("DATETIME".equals(type)) {
									java.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(((Date) obj).getTime());
									insertps.setTimestamp(i+1, sqlTimestamp);
								} else if ("INTEGER".equals(type)) {
									insertps.setInt(i+1, (Integer) obj);
								} else if ("LONG".equals(type)) {
									insertps.setLong(i+1, (Long) obj);
								} else if ("DECIMAL".equals(type) || "MONEY".equals(type)) {
									insertps.setBigDecimal(i+1, (BigDecimal) obj);
								} else if ("BOOLEAN".equals(type)) {
									insertps.setBoolean(i+1 , (Boolean) obj);
								} else if ("OBJECT".equals(type)) {
									if(null != columnMaps.get(i).get("isCustom") && columnMaps.get(i).get("isCustom").equals("true")){
										insertps.setLong(i+1, (Long) obj);
									}else{
										Method objmethod = null;
										try {
											String methodName = "get" + associatedModelNames.get(i).substring(0, 1).toUpperCase() +  associatedModelNames.get(i).substring(1, associatedModelNames.get(i).length());
											objmethod = obj.getClass().getMethod(methodName);
											if(associatedModelTypes.get(i).equals("LONG")){
												Long objId = null;
												objId = (Long) objmethod.invoke(obj);
												insertps.setObject(i+1, objId);
											}else if(associatedModelTypes.get(i).equals("TEXT")){
												String objCode = null;
												objCode = (String) objmethod.invoke(obj);
												insertps.setObject(i+1, objCode);
											}
										} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
											log.error(e.getMessage(),e);
										}	
										
									}
								}
							} else {
								insertps.setString(i + 1, null);
							}
						}
						//costBudge.setId(id);
						nmeObjs.add(costBudge);
						insertps.addBatch();
					}		
				}
				
				
				if(null != insertps){
					insertps.executeBatch();
					insertps.close();
				}
				if(null != updateps){
					updateps.executeBatch();
					updateps.close();
				}
				
			}
		});	
		
		costBudgeDaoImpl.getSession().flush();
		costBudgeDaoImpl.getSession().clear();
		
		if(needChangeFullPathNameId!=null && needChangeFullPathNameId.size()>0){
			changeFullPathName(needChangeFullPathNameId,needChangeFullPathName,businessKey,mainDisplay);//根据修改过的主显示，调整FullPathName
		}
		
		//记录导入数据日志（区分新增和修改）
		
		for(int insertIndex = 0; insertIndex < insertObjs.size(); insertIndex++)  {//新增
			SESWssFeCostBudge bizObj = insertObjs.get(insertIndex);
			costBudgeImportService.saveImportDataLog(bizObj, null, "id", "id");
		}
		for(int updateIndex = 0; updateIndex < updateObjs.size(); updateIndex++)  {//修改
			SESWssFeCostBudge bizObj = updateObjs.get(updateIndex);
			SESWssFeCostBudge oldBizObj = oldUpdateObjsMap.get(bizObj.getId());
			costBudgeImportService.saveImportDataLog(bizObj, oldBizObj, "id", "id");
		}
		
		return m;
	}
	
	private void changeFullPathName(List<Long> needChangeFullPathNameId, Map<Object, Object> needChangeFullPathName,final Property businessKey,Property mainDisplay){
		final List<Object[]> updateLists = new ArrayList<Object[]>();
		StringBuilder sql = new StringBuilder();
		sql.append("select FULL_PATH_NAME,parent_id,");
		sql.append(businessKey.getColumnName());
		sql.append(",");
		sql.append(mainDisplay.getColumnName());
		sql.append(" from ");
		sql.append(SESWssFeCostBudge.TABLE_NAME);
		sql.append(" where ");
		for(Long id : needChangeFullPathNameId){
			sql.append(" LAY_REC like '%");
			sql.append(id.toString());
			sql.append("%' or");
		}
		String sqlStr = sql.toString();
		sqlStr = sqlStr.substring(0, sqlStr.length()-2);
		List<Object[]> lists =  costBudgeDao.createNativeQuery(sqlStr).list();
		for(Object[] result : lists){
			if(Integer.valueOf(result[1].toString()) != -1){
				String[] strs = result[0].toString().split("/");
				StringBuilder newFullPathName = new StringBuilder();
				for(String str : strs){
					if(needChangeFullPathName.get(str)!=null){
						newFullPathName.append(needChangeFullPathName.get(str));
						newFullPathName.append("/");
					}else{
						newFullPathName.append(str);	
						newFullPathName.append("/");
					}
				}
				result[0] = newFullPathName.substring(0, newFullPathName.length()-1).toString();
				updateLists.add(result);
			}
		}
		
		costBudgeDaoImpl.getSession().doWork(new Work() {
			@Override
			public void execute(Connection conn) throws SQLException {
				PreparedStatement updateps = null;
				
				if(updateLists != null && updateLists.size()>0){
					String updateSql = "UPDATE " + SESWssFeCostBudge.TABLE_NAME + " SET FULL_PATH_NAME = ? WHERE " + businessKey.getColumnName() + " = ?";
					updateps = conn.prepareStatement(updateSql);
					for(int updateIndex =0;updateIndex<updateLists.size();updateIndex++){
						Object[] obj = updateLists.get(updateIndex);
						updateps.setString(1, obj[0].toString());
						if(businessKey.getType().toString().equals("TEXT")){
							updateps.setString(2, obj[2].toString());
						}else if(businessKey.getType().toString().equals("LONG")){
							updateps.setInt(2, Integer.valueOf(obj[2].toString()));
						}else if(businessKey.getType().toString().equals("INTEGER")){
							updateps.setLong(2, Long.valueOf(obj[2].toString()));
						}
						updateps.addBatch();
					}	
				}	
				
				if(null != updateps){
					updateps.executeBatch();
					updateps.close();
				}
			}
		});		
		costBudgeDaoImpl.getSession().flush();
		costBudgeDaoImpl.getSession().clear();
	}
	
	
	Map<String, Object> insertBuildedObj = new HashMap<String, Object>();
	int insertBuildedObjCount = 0;
	//新增对象的节点信息处理，从根节点开始，往上递归，如果其他对象关联的节点是新增对象，从这里获取节点信息
	private Map<String, Object> buildInsertObjNode(List<Map<String, Object>> insertNodeList, List<SESWssFeCostBudge> insertObjs, 
			Method getMainDis, Method getBusKey){
		if(insertNodeList != null && insertNodeList.size()>0){
			for(int i =0; i<insertNodeList.size(); i++){
				Map<String, Object> insertNode = insertNodeList.get(i);
				SESWssFeCostBudge insertObj = insertObjs.get(i);
				Boolean isRoot = (Boolean) insertNode.get("isRoot");
				SESWssFeCostBudge obj = insertObjs.get(i);
				String virtualId = null;
				String mainDis =null;
				String busKey =null;
				try {
					if(null != getMainDis.invoke(obj)){
						mainDis = getMainDis.invoke(obj).toString();
					}
					if(null != getBusKey.invoke(obj)){
						busKey = getBusKey.invoke(obj).toString();
					}
					Method virtualMethod = obj.getClass().getMethod("getVirtualId");
					virtualId = (String) virtualMethod.invoke(obj);
				} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) {
					log.error(e.getMessage(),e);
				}
				if(insertBuildedObj.get(busKey)!=null){
					continue;
				}else{
					if(isRoot){
						obj.setParentId(new Long(-1));
						obj.setLayNo(1);
						obj.setLayRec(obj.getId().toString());
						obj.setFullPathName(mainDis);
						if(virtualId != null && virtualId.length() > 0){
							insertBuildedObj.put(virtualId, obj);
						}else{
							insertBuildedObj.put(busKey, obj);
						}
						insertBuildedObj.put(mainDis, obj);
						insertBuildedObjCount++;
					}else if(insertNode.get("parentNode")!=null && insertBuildedObj.get(insertNode.get("parentNode").toString()) != null){
						String parentNode = insertNode.get("parentNode").toString();
						SESWssFeCostBudge parentObj = (SESWssFeCostBudge) insertBuildedObj.get(parentNode);
						obj.setParentId(parentObj.getId());
						obj.setLayNo(parentObj.getLayNo() + 1);
						obj.setLayRec(parentObj.getLayRec().toString() + "-" + obj.getId().toString());
						obj.setFullPathName(parentObj.getFullPathName() + "/" + mainDis);
						if(virtualId != null && virtualId.length() > 0){
							insertBuildedObj.put(virtualId, obj);
						}else{
							insertBuildedObj.put(busKey, obj);
						}
						insertBuildedObj.put(mainDis, obj);
						insertBuildedObjCount++;
					}
				}	
			}
			if(insertBuildedObjCount != insertNodeList.size()){
				buildInsertObjNode(insertNodeList,insertObjs,getMainDis,getBusKey);
			}else{
				return insertBuildedObj;
			}
		}
		return insertBuildedObj;
	}
	
	
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	public String getViewName(String modelCode){
		String sql = "select NAME from runtime_view where type='LIST' and ass_model_code = ?";
		String viewName = costBudgeDao.createNativeQuery(sql, modelCode).setMaxResults(1).uniqueResult()!=null?
				costBudgeDao.createNativeQuery(sql, modelCode).setMaxResults(1).uniqueResult().toString():"";
		return viewName;
	}
	
	
	
	
	private String getDbIdName(){
		String sql = "select column_name from runtime_property where model_code = ? and name = 'id'";
		String dbIDName = costBudgeDao.createNativeQuery(sql, "SESWssFe_1.0.0_costBudget_CostBudge").uniqueResult().toString();
		return dbIDName;
	}
	
	@Override
	public List<String> getSystemCodeFullPathNameByEntityCode(String entityCode) {
		String sql = "select value from base_systemcode where entity_code = ?";
		List<String> strs = costBudgeDao.createNativeQuery(sql, entityCode).list();
		return strs;
	}
	
	@Override
	public List<String> getRunningCustomProperties(String entityCode){
		List<String> list = null;
		String sql = "select property_code from BASE_CP_MODEL_MAPPING where model_code = ? and enable_custom = 1";
		list = costBudgeDao.createNativeQuery(sql, entityCode).list();
		return list;
	}
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	public String getAssProperty(String propertyCode){
		String assProperty = null;
		String sql = "select associated_property_code from runtime_property where code = ?";
		assProperty = costBudgeDao.createNativeQuery(sql,propertyCode).uniqueResult()!=null?costBudgeDao.createNativeQuery(sql,propertyCode).uniqueResult().toString():"";
		return assProperty;
	}		
	
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	public String getPropertyModelCode(String propertyCode){
		String sql = "select model_code from runtime_property where code = ?";
		String modelCode =  costBudgeDao.createNativeQuery(sql,propertyCode).uniqueResult().toString();
		return modelCode;
	}
	@Override
	@Transactional(propagation = Propagation.SUPPORTS)
	public  Object generateObjectFromJson(String jsonStr, Class clazz){
		return com.supcon.orchid.ec.utils.JSONUtil.generateObjectFromJson(jsonStr,clazz,costBudgeDao.getSessionFactory());
	}
	
	/**
	 * 以下为兼容视图热部署之前代码的方法
	 */
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	public void findDg1571050354953Page(Page<SESWssFeBudgeItem> dg1571050354953Page,SESWssFeCostBudge costBudge, String condition, List<Object> params){
		DetachedCriteria criteria = DetachedCriteria.forClass(SESWssFeBudgeItem.class);
		criteria.add(Restrictions.eq("costBudgeId", costBudge));
		criteria.add(Restrictions.eq("valid", true));
		if(!"".equals(condition) && condition.trim().length() > 0) {
			criteria.add(Restrictions.sqlRestriction(condition.replace("\"budgeItem\".", "{alias}."), params.toArray(), com.supcon.orchid.jdbc.DbUtils.getHibernateTypeByJavaType(params)));
		}
		budgeItemDao.findByPage(dg1571050354953Page, criteria);
		budgeItemService.findByNormalDataGridCostBudge(dg1571050354953Page);
	}
	
	 
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.flow.save")
	public void saveCostBudge(SESWssFeCostBudge costBudge, DataGridService dataGridService){
		self.saveCostBudge(costBudge, dataGridService, null);
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.flow.save")
	public void saveCostBudge(SESWssFeCostBudge costBudge, DataGridService dataGridService, String viewCode){
		self.saveCostBudge(costBudge, dataGridService, viewCode, null);
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public void saveCostBudge(SESWssFeCostBudge costBudge, DataGridService dataGridService, String viewCode, String eventTopic, boolean... isImport){
		self.saveCostBudge(costBudge, dataGridService, viewCode, eventTopic,null,isImport);
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public void saveCostBudge(SESWssFeCostBudge costBudge, DataGridService dataGridService, String viewCode, String eventTopic,SignatureLog signatureLog, boolean... isImport){
		List<String> assSelfPropertyList = checkParentIsSelf(costBudge);
		if(null != assSelfPropertyList && !assSelfPropertyList.isEmpty()) {
			throw new BAPException(BAPException.Code.SELECT_NOT_SELF, assSelfPropertyList.get(0));
		}
		boolean isNew = false;
		String entityCode = "SESWssFe_1.0.0_costBudget";
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		String url = null;
		if(null != costBudge.getId() && costBudge.getId() > 0){
			if(StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD())){
				AuditUtil.setAuditDes("ec.pending.edit");
				AuditUtil.setAuditOperationType("2");
			}
			props.put("eventType", "modify");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/modify";
		}else{
			isNew = true;
			if(StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD())){
				AuditUtil.setAuditDes("ec.print.template.add");
				AuditUtil.setAuditOperationType("1");
			}
			props.put("eventType", "add");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/add";
		}
		List<Event> events = null;
		Boolean viewIsView = false;
		if(viewCode != null && !viewCode.trim().isEmpty()){
			View view = viewServiceFoundation.getView(viewCode);
			if(null != view) {
				viewIsView = (view.getType() == ViewType.VIEW);
			}
			events = viewServiceFoundation.getEventsByView(view);
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "beforeSave", events, costBudge);
			}
		}
		ReflectUtils.filterObjectIdIsNVL(costBudge);
		beforeSaveCostBudge(costBudge, viewIsView);

		if (viewIsView) {
			costBudgeDao.saveWithRevertVersion(costBudge);
		} else {
			if(isNew){
				costBudgeDao.save(costBudge);
			}else{
				costBudgeDao.merge(costBudge);
			}
		}
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		if (dataGridService != null) {
			costBudgeDao.flush();
			dataGridService.execute();
		}
		
		// 一对多情况处理
		
		// 根据配置规则生成编码
		try {
			generateCostBudgeCodes(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		// 根据配置规则生成摘要
		try {
			generateCostBudgeSummarys(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		
		afterSaveCostBudge(costBudge, viewIsView);


		if(viewCode != null){
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "afterSave", events, costBudge);
			}
		}
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		costBudgeDao.flush();
		costBudgeDao.clear();
		costBudge = costBudgeDao.load(costBudge.getId());
		
		
		params.add(costBudge);
		if(signatureLog != null) {
			Object businessKey=null;
			businessKey=costBudge.getId();
			if(businessKey != null) {
				signatureLog.setBusinessKey(businessKey.toString());
			}
			if(null != AuditUtil.getCurrentAudit() && null != AuditUtil.getCurrentAudit().getOperationAudit()){
				signatureLog.setOperateLogUuid(AuditUtil.getCurrentAudit().getOperationAudit().getUuid());
			}
			signatureLog.setTableId(costBudge.getId());
			String msgId="moduleCode:SESWssFe_1.0.0#entityCode:SESWssFe_1.0.0_costBudget#modelCode:SESWssFe_1.0.0_costBudget_CostBudge#timeStamp:"+String.valueOf(System.currentTimeMillis());
			reliableMessageSenderService.sendQueue(msgId,signatureLog);
		}
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public Map<Object, Object> costBudgeDataGridImport(SESWssFeCostBudge costBudge, DataGridService dataGridService, String viewCode, String eventTopic,Property businessKey, boolean isImport){
		Map<Object, Object> map = new HashMap<Object, Object>();
		List<String> assSelfPropertyList = checkParentIsSelf(costBudge);
		if(null != assSelfPropertyList && !assSelfPropertyList.isEmpty()) {
			throw new BAPException(BAPException.Code.SELECT_NOT_SELF, assSelfPropertyList.get(0));
		}
		boolean isNew = false;
		String entityCode = "SESWssFe_1.0.0_costBudget";
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		String url = null;
		if(costBudge.getId() != null && costBudge.getId() > 0){
			if(StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD())){
				AuditUtil.setAuditDes("ec.pending.edit");
				AuditUtil.setAuditOperationType("2");
			}
			props.put("eventType", "modify");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/modify";
		}else{
			isNew = true;
			if(StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD())){
				AuditUtil.setAuditDes("ec.print.template.add");
				AuditUtil.setAuditOperationType("1");
			}
			props.put("eventType", "add");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/add";
		}
		List<Event> events = null;
		Boolean viewIsView = false;
		if(viewCode != null && !viewCode.trim().isEmpty()){
			View view = viewServiceFoundation.getView(viewCode);
			if(null != view) {
				viewIsView = (view.getType() == ViewType.VIEW);
			}
			events = viewServiceFoundation.getEventsByView(view);
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "beforeSave", events, costBudge);
			}
		}
		ReflectUtils.filterObjectIdIsNVL(costBudge);
		beforeSaveCostBudge(costBudge, viewIsView);

		if (viewIsView) {
			costBudgeDao.saveWithRevertVersion(costBudge);
		} else {
			if(isNew){
                costBudgeDao.save(costBudge);
            }else{
                costBudgeDao.merge(costBudge);
            }
		}

		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		
		if (dataGridService != null) {
			costBudgeDao.flush();
			dataGridService.execute();
		}
		
		// 一对多情况处理
		
		// 根据配置规则生成编码
		try {
			generateCostBudgeCodes(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		// 根据配置规则生成摘要
		try {
			generateCostBudgeSummarys(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		
		afterSaveCostBudge(costBudge, viewIsView);


		if(viewCode != null){
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "afterSave", events, costBudge);
			}
		}
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		costBudgeDao.flush();
		costBudgeDao.clear();
		
		String virturalId = costBudge.getVirtualId();
		
		costBudge = costBudgeDao.load(costBudge.getId());
		
		if(virturalId != null && virturalId.length() > 0){
			map.put(virturalId, costBudge.getId());
		}else{
			String methodName = "get" + businessKey.getName().substring(0, 1).toUpperCase() + businessKey.getName().substring(1);
			Object bkValue = null;
			try {
				Method getBkValue = costBudge.getClass().getMethod(methodName);
				bkValue = getBkValue.invoke(costBudge);
			} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
				log.error(e.getMessage(), e);
			}
			map.put(bkValue, costBudge.getId());
		}
		
		
		params.add(costBudge);
		return map;
	}
	
	 
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge")
	public void mergeCostBudge(SESWssFeCostBudge costBudge, DataGridService dataGridService){
		ReflectUtils.filterObjectIdIsNVL(costBudge);
		beforeSaveCostBudge(costBudge);
		costBudgeDao.merge(costBudge);
		
		if(null != costBudge && (StringUtils.isEmpty(AuditUtil.getColumnStringD()) || SESWssFeCostBudge.MODEL_CODE.equals(AuditUtil.getColumnStringD()))){
			AuditUtil.setColumnStringB(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringA(null == costBudge.getId() ? "" : costBudge.getId().toString());
			AuditUtil.setColumnStringC(costBudge.getId().toString());
		}
		
		if (dataGridService != null) {
			dataGridService.execute();
		}

		afterSaveCostBudge(costBudge);
	}
	
	/**
	 * Excel导出 
	 */
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.common.exportExcel",operType="11")
	public void excelExport(){}
	
	/**
	 * 页面打印 
	 */
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="ec.print.page.print",operType="4")
	public void print(int printType){
		if(printType == 0){
			AuditUtil.setAuditDes(InternationalResource.get("ec.print.page.print"));
		}else if(printType == 1){
			AuditUtil.setAuditDes(InternationalResource.get("ec.view.controlPrint"));
		}
	}
	
	@Override
	@AuditLog(module="SESWssFe_1.0.0", entity="SESWssFe_1.0.0_costBudget",model="SESWssFe_1.0.0_costBudget_CostBudge",desc="foundation.batch.save",operType="4")
	public void batchSaveCostBudge(SESWssFeCostBudge costBudge, DataGridService dataGridService,View view,List<Event>  events, String eventTopic, boolean... isImport){
		List<String> assSelfPropertyList = checkParentIsSelf(costBudge);
		if(null != assSelfPropertyList && !assSelfPropertyList.isEmpty()) {
			throw new BAPException(BAPException.Code.SELECT_NOT_SELF, assSelfPropertyList.get(0));
		}
		String entityCode = "SESWssFe_1.0.0_costBudget";
		Map<String, Object> props = new HashMap<String, Object>();
		props.put("callType", "service");
		props.put("entityCode", "SESWssFe_1.0.0_costBudget");
		String url = null;
		if(costBudge.getId()!=null && costBudge.getId()>0){
			props.put("eventType", "modify");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/modify";
		}else{
			props.put("eventType", "add");
			url = "com/supcon/orchid/entities/sync/sESWssFe_100_costBudget/add";
		}
		Boolean viewIsView = false;
		if(view != null ){
			viewIsView = (view.getType() == ViewType.VIEW);
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "beforeSave", events, costBudge);
			}
		}
		ReflectUtils.filterObjectIdIsNVL(costBudge);
		beforeSaveCostBudge(costBudge, viewIsView);

		if (viewIsView) {
			costBudgeDao.saveWithRevertVersion(costBudge);
		} else {
			costBudgeDao.save(costBudge);
		}

		if (dataGridService != null) {
			costBudgeDao.flush();
			dataGridService.execute();
		}
		
		// 一对多情况处理
		
		// 根据配置规则生成编码
		try {
			generateCostBudgeCodes(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		// 根据配置规则生成摘要
		try {
			generateCostBudgeSummarys(costBudge, viewIsView);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new BAPException(e.getMessage(), e);
		}
		
		afterSaveCostBudge(costBudge, viewIsView);


		if(view != null){
			if(events!=null && events.size()>0){
				executeGScript(entityCode, "afterSave", events, costBudge);
			}
		}
		List<SESWssFeCostBudge> params = new ArrayList<SESWssFeCostBudge>();
		costBudgeDao.flush();
		costBudgeDao.clear();
		costBudge = costBudgeDao.load(costBudge.getId());
		
		
		params.add(costBudge);
	}
	
	@Override
	public Page<SESWssFeCostBudge> getByPage(Page<SESWssFeCostBudge> page,DetachedCriteria detachedCriteria){
		return costBudgeDao.findByPage(page, detachedCriteria);
	}
	
	
	
	/**
	 * 获取包含下级的LayRec
	 * @param modelName 模型名称
	 * @param fieldName 查询字段名
	 * @param exp  操作符
	 * @param value 值
	 * @param crossCompany 跨公司
	 * @return List<String> layRec
	 */
	public List<String> getContainLower(String modelName, String fieldName, String exp, Object value, Boolean crossCompany){
		String layRecHql = "select layRec from " + modelName + " where valid = true and " + fieldName + exp;
		if (crossCompany) {
			layRecHql += " and cid = ?";
			return costBudgeDao.createQuery(layRecHql, value, getCurrentCompanyId()).list();
		}
		return costBudgeDao.createQuery(layRecHql, value).list();
	}

    @Override
	public String generateTableNo(){
		this.counter.setPattern(modelServiceFoundation.getEntity("SESWssFe_1.0.0_costBudget").getPrefix()+"_{1,date,yyyyMMdd}_{0,number,000}");
		return this.counter.incrementAndGetString(new Date(),new Date());
	}

    public String ClobToString(Clob clob) {
        String reString = "";
        Reader is = null;
        try {
            is = clob.getCharacterStream();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // 得到流
        BufferedReader br = new BufferedReader(is);
        String s = null;
        try {
            s = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        StringBuffer sb = new StringBuffer();
        while (s != null) {
            // 执行循环将字符串全部取出付值给StringBuffer由StringBuffer转成STRING
            sb.append(s);
            try {
                s = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        reString = sb.toString();
        return reString;
    }

    private void generateClassificCondition(List<Param> params, String classifyCodes, String split,
            QueryEntity queryEntity) {
        if (null != classifyCodes) {
            String[] classifyCodeArray = classifyCodes.split(",");
            Map<String, List<Map<String, List<Object>>>> groupMap = new HashMap<String, List<Map<String, List<Object>>>>();
            // Map<String, List<Object>> classifyMap = new HashMap<String, List<Object>>();
            AdvQueryCondition advCondition = null;
            for (int i = 0; i < classifyCodeArray.length; i++) {
                if (!classifyCodeArray[i].startsWith("bap:adv:classific:")) {
                    CustomerCondition cuscon = viewServiceFoundation
                            .findCustomerConditionByClassificCode(classifyCodeArray[i]);
                    DataClassific dc = viewServiceFoundation.getDataClassific(classifyCodeArray[i]);
                    Map<String, List<Object>> classifyMap = new HashMap<String, List<Object>>();
                    boolean flag = false;
                    if (cuscon != null && cuscon.getSql() != null && cuscon.getSql().length() > 0) {
                        flag = true;
                        String customerSql = cuscon.getSql();
                        List<Object> list = new ArrayList<Object>();
                        customerSql = parseSqlCondition(customerSql, list, null, split, queryEntity.getCustomCondation());
                        classifyMap.put(customerSql, list);

                    } else if (cuscon != null && cuscon.getJsonCondition() != null
                            && cuscon.getJsonCondition().length() > 0) {
                        flag = true;
                        String jsonString = cuscon.getJsonCondition();
                        AdvQueryCondition acon = parseJsonCondition(jsonString, queryEntity);
                        String customer = acon.getSql();
                        if (customer != null) {
                            List<Object> customerValue = acon.getValues();
                            classifyMap.put(customer, customerValue);
                        }
                    }
                    if (flag) {
                        if (groupMap.containsKey(dc.getDataGroup().getCode())) {
                            List<Map<String, List<Object>>> temp = groupMap.get(dc.getDataGroup().getCode());
                            temp.add(classifyMap);
                        } else {
                            List<Map<String, List<Object>>> temp = new ArrayList<Map<String, List<Object>>>();
                            temp.add(classifyMap);
                            groupMap.put(dc.getDataGroup().getCode(), temp);
                        }
                    }
                } else {
                    String idStr = classifyCodeArray[i].substring(classifyCodeArray[i].lastIndexOf(":") + 1);
                    advCondition = conditionService.getAdvQueryConditionAndSubs(Long.parseLong(idStr));
                    advCondition = conditionService.toSql(advCondition);
                }
            }

            String totalClassifySql = "";
            List<Object> classObjs = new ArrayList<Object>();
            if (groupMap != null && groupMap.size() > 0) {
                for (Map.Entry<String, List<Map<String, List<Object>>>> bentry : groupMap.entrySet()) {
                    if (bentry.getValue() != null) {
                        for (Map<String, List<Object>> classifyMap : bentry.getValue()) {
                            if (classifyMap != null && classifyMap.size() > 0) {
                                if (totalClassifySql.length() > 0) {
                                    totalClassifySql += " AND ";
                                }
                                if (classifyMap.size() > 1) {
                                    totalClassifySql += " ( ";
                                }
                                String classifySql = "";
                                for (Map.Entry<String, List<Object>> entry : classifyMap.entrySet()) {
                                    classifySql = classifySql + " OR " + entry.getKey();
                                    if (entry.getValue() != null && entry.getValue().size() > 0) {
                                        classObjs.addAll(entry.getValue());
                                    }
                                }
                                classifySql = classifySql.substring(3);
                                totalClassifySql += classifySql;
                                if (classifyMap.size() > 1) {
                                    totalClassifySql += " ) ";
                                }
                            }
                        }
                    }
                }
            }
            if (null != advCondition) {
                StringBuilder advSql = new StringBuilder();
                List<Object> advValue = new ArrayList<Object>();
                if (null != advCondition.getSql() && !advCondition.getSql().isEmpty()) {
                    if (totalClassifySql.length() > 0) {
                        advSql.append(" AND ");
                    }
                    advSql.append(advCondition.getSql());
                    advValue.addAll(advCondition.getValues());
                    totalClassifySql += advSql;
                    classObjs.addAll(advValue);
                }
            }
            params.add(new Param("classifySql", totalClassifySql));
            params.add(new Param("classifySqlValues", classObjs));
        }
    }

    private void generateCustomerCondition(List<Param> params, String viewCode, String split, QueryEntity queryEntity) {
        View v = viewServiceFoundation.getView(viewCode);
        if (v != null && v.getIsShadow() != null && v.getIsShadow()) {
            View shadow = v.getShadowView();
            if (shadow != null) {
                viewCode = shadow.getCode();
            }
        }
        CustomerCondition ccon = null;
        if (v.getShowType().equals(ShowType.LAYOUT)) {
            // 如果是布局情况下在布局中获取center区域的viewCode
            Map viewConfig = viewServiceFoundation.getExtraViewFullConfigMap(v);
            if (viewConfig.get("layout") != null && ((Map) viewConfig.get("layout")).get("center") != null
                    && ((Map) ((Map) viewConfig.get("layout")).get("center")).get("vcode") != null) {
                ccon = viewServiceFoundation.findCustomerConditionByViewCode(
                        ((Map) ((Map) viewConfig.get("layout")).get("center")).get("vcode").toString());
            } else {
                ccon = viewServiceFoundation.findCustomerConditionByViewCode(viewCode);
            }
        } else {
            ccon = viewServiceFoundation.findCustomerConditionByViewCode(viewCode);
        }
        if (ccon != null && ccon.getSql() != null && ccon.getSql().length() > 0) {
            String customerSql = ccon.getSql();
            if (customerSql.indexOf("return") > -1) {
                Map<String, Object> variables = new HashMap<String, Object>();
                ObjectMapper objectMapper = new ObjectMapper();
                /// To Test
                // 把queryEntity转为map
                Map<String, Object> parameters = objectMapper.convertValue(queryEntity, Map.class);
                for (String key : parameters.keySet()) {
                    variables.put(key, parameters.get(key));
                }
                /// ToDo 这里对variables中的parameters处理时应该需要改动，因为parameters的类型变了
                variables.put("parameters", parameters);
                customerSql = EngineScriptExecutor.eval(customerSql, variables).toString();
            }
            List<Object> list = new ArrayList<Object>();
            Map<String, Object> listMap = new HashMap<String, Object>();
            customerSql = parseSqlCondition(customerSql, list, listMap, split, queryEntity.getCustomCondation());
            params.add(new Param("customerSql", customerSql));
            params.add(new Param("customerSqlValues", list));
            params.add(new Param("customerSqlListMap", listMap));
        } else if (ccon != null && ccon.getJsonCondition() != null && ccon.getJsonCondition().length() > 0) {
            String jsonString = ccon.getJsonCondition();
            AdvQueryCondition acon = parseJsonCondition(jsonString, queryEntity);
            String customer = acon.getSql();
            List<Object> customerValue = acon.getValues();
            params.add(new Param("customerCondition", customer));
            params.add(new Param("customerValues", customerValue));
        }
    }

    private void generateCustomerConditionByDg(List<Param> params, String dgCode, String split,
            QueryEntity queryEntity) {
        CustomerCondition ccon = viewServiceFoundation.findCustomerConditionByDatagridCode(dgCode);
        if (ccon != null && ccon.getSql() != null && ccon.getSql().length() > 0) {
            String customerSql = ccon.getSql();
            if (customerSql.indexOf("return") > -1) {
                Map<String, Object> variables = new HashMap<String, Object>();
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> parameters = objectMapper.convertValue(queryEntity, Map.class);
                for (String key : parameters.keySet()) {
                    variables.put(key, parameters.get(key));
                }
                variables.put("parameters", parameters);
                customerSql = EngineScriptExecutor.eval(customerSql, variables).toString();
            }
            List<Object> list = new ArrayList<Object>();
            Map<String, Object> listMap = new HashMap<String, Object>();
            customerSql = parseSqlCondition(customerSql, list, listMap, split, queryEntity.getCustomCondation());
            params.add(new Param("customerSql", customerSql));
            params.add(new Param("customerSqlValues", list));
            params.add(new Param("customerSqlListMap", listMap));
        } else if (ccon != null && ccon.getJsonCondition() != null && ccon.getJsonCondition().length() > 0) {
            String jsonString = ccon.getJsonCondition();
            AdvQueryCondition acon = parseJsonCondition(jsonString, queryEntity);
            String customer = acon.getSql();
            List<Object> customerValue = acon.getValues();
            params.add(new Param("customerCondition", customer));
            params.add(new Param("customerValues", customerValue));
        }
    }

    private String parseSqlCondition(String sql, List<Object> list, Map<String, Object> listMap, String split,
            Map<String, Object> customCondation) {
        // Pattern p = Pattern.compile("\\$\\{(.+?),(.+?)\\}");
        Matcher m = p4.matcher(sql);
        while (m.find()) {
            String str = m.group();
            /// To Test
            String value = String.valueOf(customCondation.get(m.group(1).toString()));
            String type = m.group(2);
            if ("int".equalsIgnoreCase(type)) {
                Integer integer = new Integer(value);
                list.add(integer);
            } else if ("date".equals(type)) {
                value = value.replaceAll("/", "-");
                SimpleDateFormat sdf = null;
                if (value.length() == 19) {
                    sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                } else if (value.length() == 10) {
                    sdf = new SimpleDateFormat("yyyy-MM-dd");
                } else {
                    list.add(new Date(value));
                }
                if (sdf != null) {
                    try {
                        list.add(sdf.parse(value));
                    } catch (Exception e) {
                        log.info(e.getMessage());
                    }
                }
            } else if ("double".equals(type)) {
                Double doubles = new Double(value);
                list.add(doubles);
            } else if ("long".equalsIgnoreCase(type)) {
                Long longs = new Long(value);
                list.add(longs);
            } else if ("string".equalsIgnoreCase(type)) {
                list.add(value);
            /*} else if ("method".equalsIgnoreCase(type)) {
                value = m.group(1);
                try {
                    list.add(Ognl.getValue(value, this));
                } catch (Exception e) {
                    log.info(e.getMessage());
                }*/
            } else if ("array".equalsIgnoreCase(type) || "list".equalsIgnoreCase(type)) {
                String splitChar = (split == null ? "," : split.toString());
                if (listMap != null) {
                    listMap.put(m.group(1), value.split(splitChar));
                    sql = sql.replace(str, ":" + m.group(1));
                }
            } else {
                list.add(value);
            }
            sql = sql.replace(str, "?");
        }
        return sql;
    }

    private AdvQueryCondition parseJsonCondition(String jsonString, QueryEntity queryEntity) {
        // Pattern p = Pattern.compile("\\$\\{(.*?)\\}");
        Matcher m = p5.matcher(jsonString);
        while (m.find()) {
            String str = m.group();
            String value = ReflectUtils.getPropertyValue(queryEntity, m.group(1), null); // request.getParameter(str.substring(2,
                                                                                            // str.length()-1));
            if (value != null) {
                jsonString = jsonString.replace(str, value);
            } else {
                jsonString = jsonString.replace(str, "");
            }
        }
        return conditionService.toSql(jsonString);
    }

    /**
     * 实际执行查询
     *
     * @param page
     * @param viewCode
     * @param datagridCode
     * @param searchObjects
     * @param currentSqlType
     * @param tableProcessKey
     * @param flowBulkFlag
     * @param hasAttachment
     * @param params
     * @param permissionCode
     * @param noQueryFlag
     * @param exportSql
     * @return
     */
    private Map<String, Object> findExportDataInfos(Page<SESWssFeCostBudge> page, String viewCode,
            String datagridCode, Object[] searchObjects, int currentSqlType, String tableProcessKey,
            Boolean flowBulkFlag, Boolean hasAttachment, List<Param> params, String permissionCode, Boolean noQueryFlag,
            String exportSql, Integer findExportDataInfosCount) {
        Map<String, Object> exportMap = new HashMap<String, Object>();
        if (null != datagridCode && !datagridCode.equals("")) {
            viewCode = viewCode + "," + datagridCode; // 增强型视图中，列表ptcode
        }
        if (null != searchObjects && searchObjects.length > 0) {
            self.findCostBudges(page, viewCode, currentSqlType, tableProcessKey, flowBulkFlag, hasAttachment, params,
                    permissionCode, noQueryFlag, exportSql, exportMap, searchObjects);
        } else {
            self.findCostBudges(page, viewCode, currentSqlType, tableProcessKey, flowBulkFlag, hasAttachment, params,
                    permissionCode, noQueryFlag, exportSql, exportMap);
        }
        findExportDataInfosCount++;
        Map<String, Object> resultMap = new HashMap<String, Object>();
        resultMap.put("viewCode", viewCode);
        resultMap.put("page", page);
        resultMap.put("findExportDataInfosCount", findExportDataInfosCount);
        return resultMap;
    }

    /**
     * 获取助记码中使用
     *
     * @param list
     * @return
     */
    private String getMneIDs(List<Object[]> list) {
        if (list.size() == 0) {
            return null;
        } else {
            String res = "";
            for (Object[] m : list) {
                if (m[0] != null) {
                    res += "," + m[0];
                }
            }
            return res.substring(1);
        }
    }

	private void beforeSaveCostBudge(SESWssFeCostBudge costBudge, Object... objects){
		checkUniqueConstraint(costBudge);
	/* CUSTOM CODE START(serviceimpl,beforeSave,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

		//设置父预算结余为=父预算结余 - 所有子预算和
		//设置父预算结余为=父预算结余 - 该项预算额度

		//找到父节点
		SESWssFeCostBudge parentBudge = costBudge.getParentBudgetId();

		if(parentBudge != null){

			//更新父节点预算结余
			BigDecimal bignum1 = new BigDecimal("100");
			parentBudge.setBudgetAmountBalance(bignum1);

			costBudgeDao.update(costBudge);

			costBudgeDao.flush();
			costBudgeDao.clear();

		}



		/* CUSTOM CODE END */
	}

	private void afterSaveCostBudge(SESWssFeCostBudge costBudge, Object... objects){
	/* CUSTOM CODE START(serviceimpl,afterSave,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void beforeDeleteCostBudge(SESWssFeCostBudge costBudge){
	/* CUSTOM CODE START(serviceimpl,beforeDelete,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void afterDeleteCostBudge(SESWssFeCostBudge costBudge){
	/* CUSTOM CODE START(serviceimpl,afterDelete,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void beforeRestoreCostBudge(SESWssFeCostBudge costBudge){
	/* CUSTOM CODE START(serviceimpl,beforeRestore,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void afterRestoreCostBudge(SESWssFeCostBudge costBudge){
	/* CUSTOM CODE START(serviceimpl,afterRestore,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void customGenerateCodes(SESWssFeCostBudge costBudge, Object... objects) {
		/* CUSTOM CODE START(serviceimpl,customGenerateCodes,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}
	private void customGenerateSummarys(SESWssFeCostBudge costBudge, Object... objects) {
		/* CUSTOM CODE START(serviceimpl,customGenerateSummarys,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void beforeServiceDestroy() {
	/* CUSTOM CODE START(serviceimpl,beforeServiceDestroy,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	private void beforeInitBean(){
		/* CUSTOM CODE START(serviceimpl,beforeInitBean,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}
	private void afterInitBean(){
		/* CUSTOM CODE START(serviceimpl,afterInitBean,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
	}

	/* CUSTOM CODE START(serviceimpl,functions,SESWssFe_1.0.0_costBudget_CostBudge,SESWssFe_1.0.0) */
// 自定义代码

/* CUSTOM CODE END */
}
